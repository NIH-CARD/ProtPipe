?do_limma
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <- create_protdata(dat, intensity_cols = c(3:44))
devtools::load_all()
devtools::document()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(3:147), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
devtools::load_all()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(3:147), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE)
DT.original = DE
label_col = NULL, lfc_threshold=1, fdr_threshold=0.01, labelgene=NULL
label_col = NULL
lfc_threshold=1
fdr_threshold=0.01
labelgene=NULL
if(is.null(label_col)){
label_col = names(DT.original)[1]
}
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% label_gene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = subset(DT),
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
plot(g)
g
print(g)
View(g)
print(g)
library(ggplot2)
View(DT)
print(g)
View(DT)
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
View(g)
return(g)
print(g)
View(dat_pro)
View(dat_pro@prot_meta)
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
View(df)
df <- df %>% mutate(PG.ProteinGroup = rownames(df))
library(dplyr)
df <- df %>% mutate(PG.ProteinGroup = rownames(df))
rownames(df) <- NULL
df <- df %>% select(PG.ProteinGroup, everything())
saveRDS(df, file= "~/ProtPipe/EXAMPLES/VIRUS/virus_data.rds")
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(3:147), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE)
plot_volcano(DE, label_col = "Genes")
plot_volcano(DE, label_col = "Gene")
View(DE)
View(DE)
View(dat_pro)
View(dat_pro@prot_meta)
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE, label_col = "Gene")
plot_volcano(DE, label_col = "Genes")
devtools::load_all()
View(DE)
df_with_entrez <- dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
devtools::load_all()
df_with_entrez <- dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
library(org.Hs.eg.db)
df_with_entrez <- dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
View(df_with_entrez)
# Enrichment Functions
add_entrez <- function(DE, org = org.Hs.eg.db::org.Hs.eg.db){
dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
}
df_with_entrez <- add_entrez(DE)
View(df_with_entrez)
View(DT)
up_genes <- df_with_entrez %>%
dplyr::filter(adj.P.Val < 0.01) %>%
dplyr::filter(logFC > 2) %>%
.$ENTREZID
devtools::load_all()
devtools::document()
devtools::load_all()
rm(list = c("add_entrez"))
go_up <- ProtPipe::enrich_go(up_genes, df_with_entrez$ENTREZID)
devtools::load_all()
go_up <- ProtPipe::enrich_go(up_genes, df_with_entrez$ENTREZID)
View(go_up)
devtools::load_all()
go_up <- ProtPipe::enrich_go(up_genes, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes, df_with_entrez$ENTREZID)
devtools::load_all()
go_up <- ProtPipe::enrich_go(up_genes, df_with_entrez$ENTREZID)
View(go_up)
devtools::load_all()
kegg_up <- ProtPipe::enrich_kegg(up_genes, df_with_entrez$ENTREZID)
View(kegg_up)
devtools::load_all()
devtools::document()
devtools::load_all()
gse_go <- ProtPipe::gse_go(df_with_entrez$ENTREZID)
devtools::load_all()
gse_go <- ProtPipe::gse_go(df_with_entrez$ENTREZID)
ordered_genes <- df_with_entrez$logFC
names(ordered_genes) <- df_with_entrez$ENTREZID
test_that("correctly perform ttest", {
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE, label_col = "Genes")
df_with_entrez <- add_entrez(DE)
up_genes <- df_with_entrez %>%
dplyr::filter(adj.P.Val < 0.01) %>%
dplyr::filter(logFC > 2) %>%
.$ENTREZID
go_up <- ProtPipe::enrich_go(up_genes, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes, df_with_entrez$ENTREZID)
ordered_genes <- df_with_entrez$logFC
names(ordered_genes) <- df_with_entrez$ENTREZID
})
gse_go <- ProtPipe::gse_go(ordered_genes)
df_ordered <- df_sorted <- df_with_entrez[order(df_with_entrez$LogFC, decreasing = TRUE), ]
df_ordered <- df_with_entrez[order(df_with_entrez$LogFC, decreasing = TRUE), ]
df_ordered <- df_with_entrez[order(df_with_entrez$logFC, decreasing = TRUE), ]
ordered_genes <- df_ordered$logFC
names(ordered_genes) <- df_ordered$ENTREZID
gse_go <- ProtPipe::gse_go(ordered_genes)
ordered_genes_unique <- ordered_genes[!duplicated(names(ordered_genes))]
gse_go <- ProtPipe::gse_go(ordered_genes_unique)
gse_kegg <- ProtPipe::gse_kegg(ordered_genes_unique)
View(gse_go)
View(gse_kegg)
devtools::load_all()
devtools::load_all()
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
DT <- ProtPipe::add_entrez(DE)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]
View(up_genes)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]$ENTREZID
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]$ENTREZID
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes$ENTREZID, df_with_entrez$ENTREZID)
datas$go_up <- go_up
datas$kegg_up <- kegg_up
p <- enrichplot::dotplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_dotplot <- p
g <- enrichplot::barplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_barplot <- g
}
datas <- list()
plots <- list()
DT <- ProtPipe::add_entrez(DE)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes$ENTREZID, df_with_entrez$ENTREZID)
datas$go_up <- go_up
datas$kegg_up <- kegg_up
p <- enrichplot::dotplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_dotplot <- p
g <- enrichplot::barplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_barplot <- g
}
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$go_up_dotplot)
print(en[[2]]$go_up_barplot)
devtools::load_all()
en <- enrich_pathways(DE)
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$go_up_dotplot_mf)
print(en[[2]]$go_up_dotplot_cc)
print(en[[2]]$go_up_dotplot_bp)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$gse_go_dotplot)
print(en[[2]]$gse_go_emapplot)
print(en[[2]]$gse_kegg_dotplot)
gene_col = "Genes"
DE[[gene_col]] <- sapply(strsplit(DE[[gene_col]], ";"), `[`, 1)
View(DE)
dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
devtools::document()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(3:147), meta)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@condition)
View(df)
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
ProtPipe::plot_pg_counts(dat_pro)
ProtPipe::plot_pg_counts(dat_pro, condition = "viral.exposure")
ProtPipe::plot_pg_intensities(dat_pro)
ProtPipe::plot_correlation_heatmap(dat_pro)
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "viral.exposure")
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
devtools::load_all()
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
devtools::load_all()
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
ProtPipe::plot_PCs(dat_pro)
ProtPipe::plot_PCs(dat_pro, condition = "viral.exposure")
ProtPipe::plot_umap(dat_pro, condition = "time")
ProtPipe::plot_umap(dat_pro, condition = "viral.exposure")
ProtPipe::plot_umap(dat_pro, condition = "concentration")
ProtPipe::plot_hierarchical_cluster(dat_pro)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
ProtPipe::plot_CVs(PD, condition = "viral.exposure")
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
PD=dat_pro
condition="viral.exposure"
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)){
stop("the selected condition does not appear in the condition file")
}
intensities_t <- as.data.frame(t(PD@data))
intensities_t[[condition]] <- condition_file[[condition]]
# Split by condition
groups <- split(intensities_t, intensities_t[[condition]])
View(groups)
# Compute CVs per protein per group
cv_list <- lapply(names(groups), function(cond) {
group_data <- groups[[cond]][, !(colnames(groups[[cond]]) %in% condition), drop = FALSE]
if (nrow(group_data) < min_samples) {
return(NULL)  # Not enough samples
}
# CV per protein across samples in this group
cv_values <- apply(group_data, 2, function(x) {
if (all(is.na(x))) return(NA)
stats::sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)
})
data.frame(
Protein = names(cv_values),
CV = cv_values,
Condition = cond,
stringsAsFactors = FALSE
)
})
min_samples = 2
# Compute CVs per protein per group
cv_list <- lapply(names(groups), function(cond) {
group_data <- groups[[cond]][, !(colnames(groups[[cond]]) %in% condition), drop = FALSE]
if (nrow(group_data) < min_samples) {
return(NULL)  # Not enough samples
}
# CV per protein across samples in this group
cv_values <- apply(group_data, 2, function(x) {
if (all(is.na(x))) return(NA)
stats::sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)
})
data.frame(
Protein = names(cv_values),
CV = cv_values,
Condition = cond,
stringsAsFactors = FALSE
)
})
View(cv_list)
setwd("~/ProtPipe")
# Add base packages
base_deps <- c(
"r-base=4.2",
"r-devtools",
"r-remotes"
)
# Required packages
if (!requireNamespace("desc", quietly = TRUE)) {
install.packages("desc")
}
library(desc)
# Load DESCRIPTION
d <- desc::desc(file = "DESCRIPTION")
View(d)
# Extract relevant fields: Depends, Imports, (Suggests optional)
deps <- d$get_deps()
relevant_types <- c("Depends", "Imports")  # optionally add "Suggests"
deps <- deps[deps$type %in% relevant_types, ]
# Remove base R or version-only entries
deps <- deps[deps$package != "R", ]
# Format to conda-forge naming
r_pkgs <- unique(paste0("r-", tolower(deps$package)))
# Add base packages
base_deps <- c(
"r-base=4.2",
"r-devtools",
"r-remotes"
)
# Optional: suggest using these if common in R packages
extra_suggestions <- c("r-tidyverse", "r-data.table")
# Construct environment.yml content
yaml_lines <- c(
"name: myrpackage-env",
"channels:",
"  - conda-forge",
"  - defaults",
"dependencies:"
)
yaml_lines <- c(
yaml_lines,
paste0("  - ", base_deps),
paste0("  - ", sort(r_pkgs))  # sort for consistency
)
# Write to file
writeLines(yaml_lines, "environment.yml")
message("✅ environment.yml created!")
# Optional: warn about packages that may not exist on conda-forge
check_availability <- function(pkg) {
url <- paste0("https://anaconda.org/conda-forge/", pkg)
res <- tryCatch({
con <- url(url, open = "r")
close(con)
TRUE
}, error = function(e) FALSE)
return(res)
}
missing <- r_pkgs[!vapply(r_pkgs, check_availability, logical(1))]
if (length(missing)) {
warning("These packages might not exist on conda-forge:\n  - ", paste(missing, collapse = "\n  - "))
warning("You may need to install them in R via install.packages() or remotes::install_github()")
}
source("~/.active-rstudio-document")
setwd("~/projects")
usethis::create_package("condaenvr")
usethis::create_package("RConda")
