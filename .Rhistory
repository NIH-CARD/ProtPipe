devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
testthat::test_dir("tests/testthat/basics")
View(dat)
devtools::load_all()
testthat::test_dir("tests/testthat/basics")
devtools::load_all()
testthat::test_dir("tests/testthat/basics")
devtools::load_all()
testthat::test_dir("tests/testthat/basics")
View(pgcounts)
devtools::load_all()
devtools::load_all()
devtools::load_all()
View(dat_pro)
num_samples(dat_pro)
roxygen2::roxygenise()
View(dat_pro)
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
View(dat_pro)
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
roxygen2::roxygenise()
devtools::load_all()
rm(list = c("remove_sample"))
devtools::load_all()
roxygen2::roxygenise()
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
View(dat_pro)
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
View(dat_pro)
View(dat_pro1)
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
View(dat_pro1)
View(dat_pro)
View(dat_pro)
View(dat_pro1)
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
devtools::load_all()
testthat::test_file("tests/testthat/basics/test-remove_sample.R")
testthat::test_dir("tests/testthat/basics")
View(pgcounts)
devtools::load_all()
plot_pg_counts(dat_pro)
devtools::load_all()
plot_pg_counts(dat_pro)
plot_pg_counts(dat_pro, "age")
plot_pg_counts(dat_pro, "Age")
View(dat_pro)
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
View(dat_long)
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
View(dat_long)
sub <<- dat_long[dat_long$Intensity == NA,]
t <<- dat_long[dat_long$Intensity == NA,]
dasfdt <<- dat_long[dat_long$Intensity == NA,]
View(dasfdt)
View(dat_long)
View(dasfdt)
View(dat_long)
# Assuming your data frame is called 'dat' and it has a column called 'Intensity'
rows_with_na <- dat[is.na(dat$Intensity), ]
View(rows_with_na)
# Assuming your data frame is called 'dat' and it has a column called 'Intensity'
rows_with_na <- dat_long[is.na(dat_long$Intensity), ]
# Assuming your data frame is called 'dat' and it has a column called 'Intensity'
rows_with_nan <- dat_long[is.nan(dat_long$Intensity), ]
View(rows_with_nan)
View(rows_with_na)
View(rows_with_nan)
# Assuming your data frame is called 'dat' and it has a column called 'Intensity'
rows_with_nan <- filter(dat_long, Intensity == 0)
# Assuming your data frame is called 'dat' and it has a column called 'Intensity'
rows_with_nan <- filter(dat_long, "Intensity" == 0)
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/QC/test-pg_counts.R")
devtools::load_all()
testthat::test_file("tests/testthat/clustering/test-clustering.R")
wget https://github.com/SomaLogic/SomaLogic-Data/raw/main/example_data_v5.0_plasma.adat
devtools::load_all()
roxygen2::roxygenise()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(dat)
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(annoaa)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
View(soma_pro@condition)
View(soma_pro@prot_meta)
library(testthat)
setwd("~/ProtPipe/tests/testthat/soma_olink")
load("EXAMPLES/olink/npx_data1.rda")
setwd("../../..")
load("EXAMPLES/olink/npx_data1.rda")
View(npx_data1)
library(OlinkAnalyze)
install.packages("OlinkAnalyze")
library(OlinkAnalyze)
npx <- OlinkAnalyze::read_NPX(file)
npx_file <- system.file("Examples", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
npx_file <- system.file("Examples/olink", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
getwd()
npx_file <- system.file("Examples/olink/", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
npx_file <- system.file("Examples/olink", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
npx_file <- system.file("EXAMPLES/olink", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
npx_file <- system.file("EXAMPLES/olink", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
library(testthat)
load("EXAMPLES/olink/npx_data1.rda")
file = "EXAMPLES/olink/npx_data1.xlsx"
npx_file <- system.file("EXAMPLES/olink", "npx_data1.xlsx", package = "OlinkAnalyze", mustWork = TRUE)
npx <- OlinkAnalyze::read_NPX(file)
View(npx)
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
meta <- read.csv(metafile)
View(meta)
meta <- read.delim(metafile, sep = ";")
View(meta)
metafile <- "EXAMPLES/olink/npx_data1_meta.csv"
meta <- read.delim(metafile, sep = ";")
View(npx)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat_pro)
View(npx)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat)
View(dat_pro1)
dat_pro1@data[["2002"]]
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat_pro)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat_pro)
View(dat_pro@condition)
View(dat_pro@prot_meta)
View(npx)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
roxygen2::roxygenise()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat_pro)
View(dat_pro@data)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
View(dat_pro)
View(dat_pro@data)
View(dat_pro)
View(dat_pro)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-olink.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
View(soma_pro@condition)
View(soma_pro@prot_meta)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(DT_filter)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(DT_filter)
View(soma_pro)
View(soma_pro@data)
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
View(soma_pro)
View(soma_pro@data)
View(DT_filter)
View(soma_pro@data)
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
devtools::load_all()
testthat::test_file("tests/testthat/soma_olink/test-soma.R")
setwd("~/ProtPipe/tests/testthat/basics")
setwd("../../..")
# Print the current working directory
print(getwd())
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
View(dat_pro)
View(dat_pro@condition)
df <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
meta <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/metadata.csv")
View(meta)
dat_pro <<- create_protdata(df, meta)
library(data.table)
df <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
meta <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/metadata.csv")
dat_pro <<- create_protdata(df, meta)
View(dat_pro)
View(dat_pro@condition)
View(dat_pro@data)
library(arrow)
library(clusterProfiler)
report <- read_parquet("~/OneDrive - National Institutes of Health/projects/virus/data/insoluble_brain/report.parquet")
report <- read_delim("~/OneDrive - National Institutes of Health/projects/virus/data/insoluble_brain/report.tsv")
blue_enrich_path <- "~/OneDrive - National Institutes of Health/projects/virus/figures/WGCNA/blue_module/blue_kegg_enrichment.csv"
lfc_path <- "~/OneDrive - National Institutes of Health/projects/virus/data/logfc_all_virus.tsv"
lfc_df <- read.delim(lfc_path)
blue_kegg_ndd <- read.csv(blue_enrich_path) %>%
filter(subcategory == 'Neurodegenerative disease')
edox <- setReadable( blue_kegg_ndd, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(blue_kegg_ndd)
blue_NDD_genes <- strsplit(blue_kegg$geneID, "/") %>%
unlist() %>%
unique() %>%
bitr(,
fromType = "ENTREZID",
toType = "SYMBOL",
OrgDb = org.Hs.eg.db)%>%
.$SYMBOL
lfc_heatmap <-function(lfc_data, subset_genes, title){
#get genes in pathway
lfc_cell_death <- lfc_data[lfc_data$genes %in% subset_genes,]
#assign rownames to significant genes
pcols <- grep("adj.P.Val", colnames(lfc_cell_death), ignore.case = TRUE)
is_significant <- apply(lfc_cell_death[, pcols], 1, function(x) any(x < 0.05))
is_significant[is.na(is_significant)] <- FALSE
anno_col <- ifelse(is_significant, lfc_cell_death$genes, "")
pval_matrix <- as.matrix(lfc_cell_death[, pcols])
#select lfc cols
lfc_columns <- grep("lfc", colnames(lfc_cell_death))
df_lfc <- lfc_cell_death[, c(1,2, lfc_columns)]
df_lfc[is.na(df_lfc)] <- 0
# set lfc limits (-1.5, 1.5)
df_lfc[sapply(df_lfc, is.numeric)] <- lapply(df_lfc[sapply(df_lfc, is.numeric)], function(x) {
ifelse(x > 1.5, 1.5,
ifelse(x < -1.5, -1.5, x))
})
pheatmap(
df_lfc[,-c(1,2)],
#display_numbers = matrix(ifelse(pval_matrix < 0.05, "*", ""), nrow = nrow(pval_matrix)),
display_numbers = F,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_rownames = F,
scale = "none",
main = title,
fontsize_row = 5,
#labels_row = anno_col,
border_color = NA,
angle_col = 45,
color = colorRampPalette(c("blue", "white", "red"))(100)
)
}
print(lfc_heatmap(lfc_df, blue_NDD_genes, "Blue Module NDD Genes"))
blue_enrich_path <- "~/OneDrive - National Institutes of Health/projects/virus/figures/WGCNA/blue_module/blue_kegg_enrichment.csv"
lfc_path <- "~/OneDrive - National Institutes of Health/projects/virus/data/logfc_all_virus.tsv"
lfc_df <- read.delim(lfc_path)
blue_kegg_ndd <- read.csv(blue_enrich_path) %>%
filter(subcategory == 'Neurodegenerative disease')
edox <- setReadable( blue_kegg_ndd, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(blue_kegg_ndd)
edox <- setReadable(blue_kegg_ndd, 'org.Hs.eg.db', 'ENTREZID')
blue_kegg_ndd <- read.csv(blue_enrich_path)
edox <- setReadable(blue_kegg_ndd, 'org.Hs.eg.db', 'ENTREZID')
View(blue_kegg_ndd)
library(org.Hs.eg.db)
blue_kegg_ndd <- read.csv(blue_enrich_path) %>%
filter(subcategory == 'Neurodegenerative disease')
edox <- setReadable(blue_kegg_ndd, 'org.Hs.eg.db', 'ENTREZID')
library(circlize)
library(RColorBrewer)
enrichToCircle <- function(enrich){
#make adjacency matrices from enrichment results
res <- enrich@result
en_df <- data.frame(
gene_id = unlist(strsplit(res$geneID, "/")),  # Split by '/' if multiple genes are associated with one term
pathway = rep(res$Description, sapply(strsplit(res$geneID, "/"), length))  # Repeat the pathway name accordingly
)
en_matrix <- table(en_df$gene_id, en_df$pathway)
#assign colors to pathways
num_pathways <- ncol(en_matrix)  # Number of pathways
colors <- brewer.pal(min(num_pathways, 12), "Set3")  # "Set3" has a maximum of 12 distinct colors
pathway_colors <- setNames(colors, colnames(en_matrix))  # Pathways as column names
#all genes are grey
gene_colors <- rep("grey", nrow(en_matrix))  # All genes will be grey
names(gene_colors) <- rownames(en_matrix)
grid_col <- c(pathway_colors, gene_colors)
# View the final grid_col mapping
print(grid_col)
# Set plot margins to create space for the legend (increasing the right margin)
par(mar = c(5, 5, 5, 22))  # Adjust the right margin to give space for the legend
# Clear any previous circular plot
circos.clear()
#circos.par(gap.degree = 3)
circos.par(start.degree = 90)
chordDiagram(t(en_matrix), grid.col = grid_col,annotationTrack = "grid",
preAllocateTracks = list(track.height = .1, track.width = .1))
circos.track(track.index = 1, panel.fun = function(x, y) {
# Add gene labels (inside the circle)
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5), cex = 0.35)
}, bg.border = NA)  # Set bg.border to NA to avoid overlap
}
enrichToCircle(en_ns)
enrichToCircle(en_ndd)
#enrichment results for blue modules
module_mem <- read.csv("~/OneDrive - National Institutes of Health/projects/virus/figures/WGCNA/module_membership.csv")
blue_genes <- module_mem[module_mem$bwnet.colors == 'blue',]
blue_genes <- as.list(blue_genes$Genes)
blue_genes <- lapply(blue_genes, function(x) sub(";.*", "", x))
blue_genes <- bitr(blue_genes,"SYMBOL", "ENTREZID", "org.Hs.eg.db")
all_genes <- as.list(module_mem$Genes)
all_genes <- lapply(all_genes, function(x) sub(";.*", "", x))
all_genes <- bitr(all_genes,"SYMBOL", "ENTREZID", "org.Hs.eg.db")
en <- enrichKEGG(blue_genes$ENTREZID, universe = all_genes$ENTREZID) %>%
setReadable('org.Hs.eg.db', 'ENTREZID')
en_ndd <- clusterProfiler::filter(en, subcategory == 'Neurodegenerative disease')
en_ns <- clusterProfiler::filter(en, subcategory == 'Nervous system')
cnetplot(en_ndd, circular = T, colorEdge = T)
cnetplot(en_ns, circular = T, colorEdge = T)
entree <- pairwise_termsim(en)
treeplot(entree, nWords = 0,nCluster = 4)
library(circlize)
library(RColorBrewer)
enrichToCircle <- function(enrich){
#make adjacency matrices from enrichment results
res <- enrich@result
en_df <- data.frame(
gene_id = unlist(strsplit(res$geneID, "/")),  # Split by '/' if multiple genes are associated with one term
pathway = rep(res$Description, sapply(strsplit(res$geneID, "/"), length))  # Repeat the pathway name accordingly
)
en_matrix <- table(en_df$gene_id, en_df$pathway)
#assign colors to pathways
num_pathways <- ncol(en_matrix)  # Number of pathways
colors <- brewer.pal(min(num_pathways, 12), "Set3")  # "Set3" has a maximum of 12 distinct colors
pathway_colors <- setNames(colors, colnames(en_matrix))  # Pathways as column names
#all genes are grey
gene_colors <- rep("grey", nrow(en_matrix))  # All genes will be grey
names(gene_colors) <- rownames(en_matrix)
grid_col <- c(pathway_colors, gene_colors)
# View the final grid_col mapping
print(grid_col)
# Set plot margins to create space for the legend (increasing the right margin)
par(mar = c(5, 5, 5, 22))  # Adjust the right margin to give space for the legend
# Clear any previous circular plot
circos.clear()
#circos.par(gap.degree = 3)
circos.par(start.degree = 90)
chordDiagram(t(en_matrix), grid.col = grid_col,annotationTrack = "grid",
preAllocateTracks = list(track.height = .1, track.width = .1))
circos.track(track.index = 1, panel.fun = function(x, y) {
# Add gene labels (inside the circle)
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5), cex = 0.35)
}, bg.border = NA)  # Set bg.border to NA to avoid overlap
}
enrichToCircle(en_ns)
enrichToCircle(en_ndd)
devtools::load_all()
devtools::load_all()
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@data)
View(dfas@condition)
View(dfas@prot_meta)
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@data)
View(dfas@prot_meta)
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@data)
dat <<- data.table::fread("EXAMPLES/SILAC/pSILAC_CARD_Challenge_Report.tsv")
View(dat)
View(dat)
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@data)
View(dfas@condition)
View(dfas@prot_meta)
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
colnames_out
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@data)
colnames_out
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
devtools::load_all()
testthat::test_file("tests/testthat/Silac/test-silac.R")
View(dfas)
View(dfas@channels[["Channel1"]])
View(dfas@channels[["Channel2"]])
View(dfas@condition)
