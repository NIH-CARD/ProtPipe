p <- plot_pg_counts(dat_pro)
View(dat)
devtools::load_all()
d <- fread("~/ProtPipe/EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
library(data.table)
d <- fread("~/ProtPipe/EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
PD <- create_protdata(d)
devtools::load_all()
PD <- create_protdata(d)
devtools::load_all()
PD <- create_protdata(d)
devtools::load_all()
pca <- get_PCs(PD)
devtools::load_all()
pca <- get_PCs(PD)
devtools::load_all()
pca <- get_PCs(PD)
View(pca_data)
devtools::load_all()
pca <- get_PCs(PD)
View(pca)
devtools::load_all()
plot_PCs(PD)
devtools::load_all()
plot_PCs(PD)
devtools::load_all()
plot_hierarchical_cluster(PD)
devtools::load_all()
plot_hierarchical_cluster(PD)
devtools::load_all()
plot_hierarchical_cluster(PD)
devtools::load_all()
plot_umap(PD)
devtools::load_all()
plot_umap(PD)
devtools::load_all()
plot_umap(PD)
devtools::load_all()
plot_umap(PD)
devtools::load_all()
library(data.table)
df <- fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.pg_matrix.tsv")
PD <- create_protdata(df)
View(df)
rlang::last_trace()
View(df)
devtools::load_all()
PD <- create_protdata(df)
devtools::load_all()
PD <- create_protdata(df)
plot_pg_counts(PD)
plot_pg_intensities(PD)
plot_correlation_heatmap(PD)
## correlation
#' Title
#'
#' @param DT.corrs
#'
#' @return
#' @export
#'
#' @examples
plot_correlation_heatmap <- function(PD) {
DT.corrs <- get_spearman(PD)
n_samples <- length(unique(DT.corrs[,'SampleA']))
max_limit <- max(DT.corrs$Spearman)
min_limit <- min(DT.corrs$Spearman)
mid_limit <- as.numeric(format(((max_limit + min_limit) / 2), digits=3))
g <- ggplot2::ggplot(DT.corrs, ggplot2::aes(x=SampleA, y=SampleB, fill=Spearman, label=Spearman)) +
ggplot2::geom_tile() +
ggplot2::geom_text(color='gray10') +
ggplot2::theme_classic() +
ggplot2::scale_fill_gradient2(low = "skyblue", high = "tomato1", mid = "white",
midpoint = mid_limit, limit = c(min_limit,max_limit),
space = "Lab", breaks=c(min_limit, mid_limit, max_limit),
name="Spearman\nCorrelation\n") +
ggplot2::theme(axis.text.x=ggplot2::element_text(angle=45, hjust=1)) +
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.title.y=ggplot2::element_blank())
return (g)
}
plot_correlation_heatmap(PD)
View(df)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
View(plot_correlation_heatmap)
View(plot_correlation_heatmap)
devtools::load_all()
df <- fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.pg_matrix.tsv")
PD <- create_protdata(df)
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
devtools::load_all()
plot_correlation_heatmap(PD)
plot_PCs(PD)
plot_hierarchical_cluster(PD)
metadta <- fread("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/metadata/SLAM_template/heart_metadata.csv")
View(metadta)
rownames(metadata) <- paste0("SLAM_HRT_", rownames(metadata))
metadata <- fread("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/metadata/SLAM_template/heart_metadata.csv")
rownames(metadata) <- paste0("SLAM_HRT_", rownames(metadata))
View(metadata)
rownames(metadata) <- paste0("SLAM_HRT_", metadata$V1)
View(metadata)
rownames(metadata) <- sapply(rownames(metadata), function(x) paste0("SLAM_HRT_", x))
rownames(metadata) <- sapply(metadata$V1, function(x) paste0("SLAM_HRT_", x))
setkey(metadata, paste0("SLAM_HRT_", rownames(metadata)))
setkey(metadata, sapply(metadata$V1, function(x) paste0("SLAM_HRT_", x)))
t <- sapply(metadata$V1, function(x) paste0("SLAM_HRT_", x))
t <- sapply(metadata$V1, t]
t <- sapply(metadata$V1, t)
View(metadta)
View(metadata)
View(metadta)
View(metadata)
t <- sapply(metadata$V1, function(x) paste0("SLAM_HRT_", x))
setkey(metadata, t)
metadata <- read.csv("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/metadata/SLAM_template/heart_metadata.csv")
rownames(metadata) <- sapply(rownames(metadata), function(x) paste0("SLAM_HRT_", x))
View(metadata)
metadata$Age <- as.numeric(gsub(metadata$Age, 'M', ""))
metadata$Age <- as.numeric(gsub('M', "", metadata$Age))
metadata <- read.csv("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/metadata/SLAM_template/heart_metadata.csv")
rownames(metadata) <- sapply(rownames(metadata), function(x) paste0("SLAM_HRT_", x))
metadata$Age <- as.numeric(gsub('M', "", metadata$Age))
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(PD)
#standardize the column names and order
dat <- standardize_format(data)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(PD)
View(PD@condition)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(datah)
View(prot_meta)
View(df)
df <- fread("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/metadata/SLAM_template/report.pg_matrix.tsv")
df <- fread("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Heartreport.pg_matrix.tsv")
df <- fread("/Users/epsteinjm/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Heart/report.pg_matrix.tsv")
PD = create_protdata(df, condition = metadata)
View(prot_meta)
View(datah)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(datah)
PD = create_protdata(df, condition = metadata)
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(PD)
View(PD@data)
View(datah)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(ta)
View(ma)
View(ca)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
devtools::load_all()
PD = create_protdata(df, condition = metadata)
View(PD)
View(PD@condition)
plot_correlation_heatmap(PD)
plot_intensities(PD)
plot_pg_counts(PD)
plot_pg_intensities(PD)
plot_pca(PD)
plot_PCs(PD)
plot_hierarchical_cluster(PD)
plot_umap(PD)
View(PD)
View(PD@data)
devtools::load_all()
plot_PCs(PD, condition = "Age")
devtools::load_all()
plot_PCs(PD, condition = "Age")
View(PD)
View(PD@condition)
plot_PCs(PD, condition = 'Age')
t <- getCondition(PD)[["Age"]]
plot_PCs(PD, condition = 'Age')
devtools::load_all()
plot_PCs(PD, condition = 'Age')
devtools::load_all()
plot_PCs(PD, condition = 'Age')
devtools::load_all()
plot_PCs(PD, condition = 'Age')
View(pca_df)
devtools::load_all()
plot_PCs(PD, condition = 'Age')
devtools::load_all()
plot_PCs(PD, condition = 'Sex')
devtools::load_all()
plot_PCs(PD, condition = 'Sex')
plot_umap(PD, condition = 'Sex')
plot_umap(PD, condition = 'Age')
plot_umap(PD, condition = 'Strain')
devtools::load_all()
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
devtools::load_all()
PD_f <- removeOutliers(PD)
View(PD)
devtools::load_all()
PD_f <- removeSample(PD, ["SLAM_HRT_3"])
PD_f <- removeSample(PD, c("SLAM_HRT_3"))
devtools::load_all()
PD_f <- removeSample(PD, c("SLAM_HRT_3"))
PD_f <- removeSample(PD, c("SLAM_HRT_3"))
devtools::load_all()
PD_f <- removeSample(PD, c("SLAM_HRT_3"))
devtools::load_all()
PD_f <- removeSample(PD, c("SLAM_HRT_3"))
View(PD_f)
plot_PCs(PD_f, "Age")
plot_umap(PD_f, "Age")
plot_umap(PD_f, condition = "Age")
plot_umap(PD_f, condition = "Sex")
plot_umap(PD_f, condition = "Strain")
plot_PCs(PD_f, condition = "Strain")
plot_PCs(PD_f, condition = "Sex")
devtools::load_all()
path <- '~/OneDrive - National Institutes of Health/projects/deNova/results'
df <- read.delim(path)
path <- paste0(path,'/report.pg_matrix.tsv')
df <- read.delim(path)
View(df)
PD = create_protdata(df)
library(data.table)
PD = create_protdata(df)
View(df)
PD = create_protdata(df)
devtools::load_all()
PD = create_protdata(df)
plot_pg_counts(PD)
plot_PCs(PD)
path <- '~/OneDrive - National Institutes of Health/projects/deNova/results/report.pg_matrix.tsv'
df[1,1]
View(df)
colnames(df)[10]
colnames(df) <- gsub('X.data.CARD_proteomics.users.Jacob.human_brain_data.20240806_human_brain_AD_insoluble_IK.mzML_files.14', "", colnames(df))
View(df)
df <- read.delim(path)
colnames(df) <- gsub('X.data.CARD_proteomics.users.Jacob.human_brain_data.20240806_human_brain_AD_insoluble_IK.mzML_files.14', "", colnames(df))
View(df)
colnames(df) <- gsub('X.data.CARD_proteomics.users.Jacob.human_brain_data.20240806_human_brain_AD_insoluble_IK.mzML_files.', "", colnames(df))
View(df)
df <- read.delim(path)
colnames(df) <- gsub('X.data.CARD_proteomics.users.Jacob.human_brain_data.20240806_human_brain_AD_insoluble_IK.mzML_files.', "", colnames(df))
colnames(df) <- gsub('.mzML', "", colnames(df))
View(df)
PD = create_protdata(df)
plot_PCs(PD)
source("~/OneDrive - National Institutes of Health/Code/usefule_functions.R")
source("~/OneDrive - National Institutes of Health/Code/useful_functions.R")
View(plot_volcano)
View(df)
library(data.table)
library(dplyr)
source("~/OneDrive - National Institutes of Health/Code/useful_functions.R")
path <- '~/OneDrive - National Institutes of Health/projects/deNova/results/report.pg_matrix.tsv'
df <- read.delim(path)
colnames(df) <- gsub('X.data.CARD_proteomics.users.Jacob.human_brain_data.20240806_human_brain_AD_insoluble_IK.mzML_files.', "", colnames(df))
colnames(df) <- gsub('.mzML', "", colnames(df))
control = c("3", "6", "7", "15", "21", "25")
ad = c("1", "4", "10", "11", "14", "16")
volcano_plot(df, control_cols = control, treatment_cols = ad)
volcano_plot(df, control_cols = control, treatment_cols = ad, labelgene = df$Protein.Group)
volcano_plot(df, control_cols = control, treatment_cols = ad, method = "limma", labelgene = df$Protein.Group)
rownames(df) <- df$Protein.Group
volcano_plot(df, control_cols = control, treatment_cols = ad, method = "limma", labelgene = df$Protein.Group)
ad = c("1", "4", "10", "11", "14", "16", "17", "18", "22", "24", "26", "28", "30", "31", "32")
volcano_plot(df, control_cols = control, treatment_cols = ad, method = "limma", labelgene = df$Protein.Group)
source("~/OneDrive - National Institutes of Health/Code/useful_functions.R")
control = c("3", "6", "7", "15", "21", "25")
ad = c("1", "4", "10", "11", "14", "16", "17", "18", "22", "24", "26", "28", "30", "31", "32")
limma <- do_limma(df, ad, control)
View(limma)
devtools::load_all()
testthat::test_file("tests/testthat/test-foofy.R")
ls
setwd("~/ProtPipe")
testthat::test_file("tests/testthat/test-foofy.R")
testthat::test_file("tests/testthat/test_prot_data.R")
expect_s4_class(dat_pro, "ProtData")
devtools::load_all()
testthat::test_file("tests/testthat/test_prot_data.R")
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
library(dplyr)
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
devtools::document()
devtools::load_all()
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
devtools::load_all()
dat_pro <<- create_protdata(dat)
devtools::load_all()
dat_pro <<- create_protdata(dat)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@prot_meta)
devtools::load_all()
dat_pro <<- create_protdata(dat)
View(dat_pro)
View(dat_pro@prot_meta)
View(dat_pro@data)
testthat::test_file("tests/testthat/test_prot_data.R")
setwd("~/ProtPipe")
devtools::load_all()
testthat::test_file("tests/testthat/test_prot_data.R")
devtools::load_all()
testthat::test_file("tests/testthat/test_prot_data.R")
devtools::document()
View(dat_pro@condition)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
View(PD)
View(PD@prot_meta)
View(dat_pro)
View(dat_pro@prot_meta)
prot_col = "Protein_Group"
gene_col = "Gene"
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat <- getData(dat_pro) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
PD = dat_pro
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
t <- c(gene_col, prot_col)
gene_col = "Genes"
PD = dat_pro
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
t <- c(gene_col, prot_col)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(, dplyr::select(getCondition(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getCondition(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
View(dat)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col)),by=0) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat_original <- getData(PD)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col)),by='row.names') %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
