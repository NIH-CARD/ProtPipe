treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- Log2_DT[,c(treatment_samples, control_samples)]
treatment_samples
control_samples
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
group_list <- factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
design <- model.matrix(~group_list)
colnames(design) <- levels(group_list)
rownames(design) <- colnames(DT_limma)
View(design)
design <- model.matrix(~0+group_list)
colnames(design) <- levels(group_list)
rownames(design) <- colnames(DT_limma)
#limma
fit <- lmFit(DT_limma, design)
fit <- eBayes(fit, trend=TRUE)
result_limma <- topTable(fit, coef=2,n=Inf)
result_limma
fit
View(fit)
summary(fit)
summary(result_limma)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='EG.PrecursorId',by.y=0)
View(result_limma)
View(DT_limma)
design <- model.matrix(~group_list)
colnames(design) <- levels(group_list)
rownames(design) <- colnames(DT_limma)
#limma
fit <- lmFit(DT_limma, design)
fit <- eBayes(fit, trend=TRUE)
result_limma <- topTable(fit, coef=2,n=Inf)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='EG.PrecursorId',by.y=0)
design <- model.matrix(~0+group_list)
colnames(design) <- levels(group_list)
rownames(design) <- colnames(DT_limma)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = design)
View(cont.matrix)
#limma
fit <- lmFit(DT_limma, cont.matrix)
#limma
fit <- contrasts.fit(DT_limma, cont.matrix)
#limma
fit <- lmFit(DT_limma, design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, trend=TRUE)
result_limma <- topTable(fit2, coef=2,n=Inf)
result_limma <- topTable(fit2, coef=1,n=Inf)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='EG.PrecursorId',by.y=0)
View(result_limma)
#### ARG PARSING ###################################################################################
library(optparse)
pwd = getwd()
optparse_indent = '\n                '
option_list = list(
make_option(
"--pgfile",
default=NULL,
help=paste(
'Input file of Protein Group Intensity (from DIA-NN or Spectronaut)',
'Required.',
sep=optparse_indent
)
),
make_option(
"--pepfile",
default=NULL,
help=paste(
'Input file of Peptide Intensity (from DIA-NN or Spectronaut)',
'Required.',
sep=optparse_indent
)
),
make_option(
"--out",
dest="outdir",
default='output',
help=paste(
'Directory to direct all output. Directory will be created if does not exist).',
'Defaults to the current working directory:',
pwd,
sep=optparse_indent
)
),
make_option(
"--labelgene",
dest="labelgene",
default=NULL,
help='Gene to always label in output plots'
),
make_option(
"--heatmap",
dest="heatmap",
default=NULL,
help='Gene to plot heatmap'
),
make_option(
"--base",
dest="log_base",
default=10,
help='Base for log transformation of intensity data. Default: 10'
),
make_option(
"--normalize",
default='none',
type='character',
help=paste(
'shift: adjust sample intensities to match global median by adding a constant',
'scale: adjust sample intensities to match global median by multiplicative scaling',
'none: do not normalize',
sep=optparse_indent
)
),
make_option(
"--exclude",
default=NULL,
type='character',
help=paste(
'semicolon-separated string of files to exclude from analysis'
)
),
make_option(
"--sds",
dest = 'sds',
default=3,
type='numeric',
help=paste(
'Filter out samples with protein group counts > N standard deviations from the mean.',
'Increase to higher values for greater tolerance of variance in protein group counts.',
'Default: 3',
sep=optparse_indent
)
),
make_option(
"--minintensity",
dest = 'minintensity',
default=0,
type='numeric',
help='Minimum LINEAR (not log) intensity. Default: 0'
),
make_option(
"--fdr",
dest = 'fdr_threshold',
default=0.01,
type='numeric',
help=paste(
'False Discovery Rate threshold for differential abundance analysis.',
'Default: 0.01',
sep=optparse_indent
)
),
make_option(
"--foldchange",
dest = 'foldchange',
default=2,
type='numeric',
help=paste(
'Minimum LINEAR fold change [NOT log, as log base can be modified] for labeling',
'protein groups in differential abundance analysis. Default: 2 (equivalent to',
'log2 fold-change threshold of 1)',
sep=optparse_indent
)
),
make_option(
"--imputation",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
),
make_option(
"--design",
default=NULL,
help=paste(
'Comma- or tab-delimited, three-column text file specifying the experimental design.',
'File should contain headers. Header names do not matter; column order DOES matter.',
'Columns order: <sample_name> <condition> <control>',
sep=optparse_indent
)
),
make_option(
"--DE_method",
dest="DE_method",
default='ttest',
type='character',
help=paste(
'ttest',
'limma',
sep=optparse_indent
)
),
make_option(
"--neighbors",
default=15,
type='numeric',
help=paste(
'N Neighbors to use for UMAP. Default: 15',
sep=optparse_indent
)
),
make_option(
"--dry",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
),
make_option(
"--enrich",
dest = 'enrich_pvalue',
default=0.01,
type='numeric',
help=paste(
'The cutoff of p-value for gene enrichment analysis.',
'Default: 0.01',
sep=optparse_indent
)
),
make_option(
"--gsea",
dest = 'gsea_fdr_cutoff',
default=0.01,
type='numeric',
help=paste(
'The cutoff False Discovery Rate of gsea analysis.',
'Default: 0.01',
sep=optparse_indent
)
)
)
opt <- parse_args(OptionParser(option_list=option_list))
if(! opt$normalize %in% c('shift','scale','none')) {
cat("ERROR: --normalize must be 'shift' 'scale' or 'none'\n")
badargs <- TRUE
}
if (is.null(opt$pgfile) && is.null(opt$pepfile)) {
cat("ERROR: --pgfile <file> or --pepfile  <file> must be provided\n")
badargs <- TRUE
}
#### Source the function ###
source('src/functions.R')
#### PACKAGES ######################################################################################
package_list = c('ggplot2', 'data.table', 'corrplot', 'umap',
'magick', 'ggdendro', 'ecodist','ggbeeswarm',
'ggrepel', 'ggthemes', 'foreach','reshape2',
'org.Hs.eg.db','clusterProfiler','pheatmap','limma')
cat("INFO: Loading required packages\n      ")
cat(paste(package_list, collapse='\n      ')); cat('\n')
defaultW <- getOption("warn"); options(warn = -1)   # Temporarily disable warnings for quiet loading
if(all((lapply(package_list, require, character.only=TRUE)))) {
cat("INFO: All packages successfully loaded\n")
} else {
cat("ERROR: One or more packages not available. Are you running this within the container?\n")
}
options(warn = defaultW)    # Turn warnings back on
opt$lfc_threshold <- log(opt$foldchange, base=2)
cat(paste0('INFO: LFC threshold of log2(Intensity) > ', opt$lfc_threshold, '\n'))
cat(paste0('INFO: FDR threshold of ', opt$fdr_threshold, '\n'))
QC_dir <- paste0(opt$outdir, '/QC/')
if(! dir.exists(QC_dir)){
dir.create(QC_dir, recursive = T)
}
dat <- fread('/Users/liz36/Documents/CARD_challenge/virus/20240212_100712_CARD_challenge_virus_Report.tsv')
dat <- standardize_format(dat)
tryTo(paste0('INFO: Massaging data from ', opt$pgfile, ' into a common style format for processing'), {
dat <- standardize_format(dat)
}, 'ERROR: failed! Check for missing/corrupt headers?')
tryTo(paste0('INFO: Trimming extraneous column name info'), {
setnames(dat, trim_colnames(dat))
#set column order
col_order=c(colnames(dat)[1:2],sort(colnames(dat)[3:ncol(dat)]))
setcolorder(dat,col_order)
}, 'ERROR: failed! Check for missing/corrupt headers?')
dat <- standardize_format(dat)
setwd('/Users/liz36/Documents/GitHub/CARD_Protpipe_dev/ProtPipe/')
#### Source the function ###
source('src/functions.R')
dat <- standardize_format(dat)
setnames(dat, trim_colnames(dat))
#set column order
col_order=c(colnames(dat)[1:2],sort(colnames(dat)[3:ncol(dat)]))
setcolorder(dat,col_order)
design <- fread('/Users/liz36/Documents/CARD_challenge/virus/design_matrix_1.csv', header=TRUE)
setnames(design, c('sample_name', 'condition', 'control'))
View(design)
Log2_dat=dat
Log2_dat=as.data.frame(Log2_dat)
Log2_dat[, 3:ncol(Log2_dat)]=log2(Log2_dat[, 3:ncol(Log2_dat)]+1)
Log2_DT = Log2_dat
design_matrix = design
View(do_limma)
View(do_limma_pro)
View(do_limma_pro)
#data
name=colnames(Log2_DT)[-grep('raw',colnames(Log2_DT))]
rownames(Log2_DT)=Log2_DT$PG.Genes
#comparation
conditions <- unique(design_matrix$condition)
conditions
treatment="EBV_01_24hr"
control=unique(design_matrix$control[design_matrix$condition==treatment])
print(paste0(treatment, ' vs ', control, ' Differential Analysis by Limma '))
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- Log2_DT[,c(treatment_samples, control_samples)]
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
View(do_limma)
#data
name=colnames(Log2_DT)[1:2]
rownames(Log2_DT)=Log2_DT$Protein_Group
#comparation
conditions <- unique(design_matrix$condition)
control=unique(design_matrix$control[design_matrix$condition==treatment])
print(paste0(treatment, ' vs ', control, ' Differential Analysis by Limma '))
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- Log2_DT[,c(treatment_samples, control_samples)]
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
if (n_treatment>3&n_control>3) {
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[!(DT_limma$missing_value_t >(n_treatment/2)&DT_limma$missing_value_t < n_treatment),]
DT_limma <- DT_limma[!(DT_limma$missing_value_c >(n_control/2)&DT_limma$missing_value_c <n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
} else{
# Drop rows (protein groups) with missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
}
group_list <- factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
limma_design <- model.matrix(~0+group_list)
colnames(limma_design) <- levels(group_list)
rownames(limma_design) <- colnames(DT_limma)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = design)
View(limma_design)
View(cont.matrix)
#limma
fit <- lmFit(DT_limma, limma_design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, trend=TRUE)
result_limma <- topTable(fit2, coef=1,n=Inf)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='Protein_Group',by.y=0)
View(result_limma)
design <- fread('/Users/liz36/Documents/CARD_challenge/virus/design_matrix_1.csv', header=TRUE)
setwd('/Users/liz36/Documents/GitHub/CARD_Protpipe_dev/ProtPipe/')
dat <- fread('/Users/liz36/Documents/CARD_challenge/virus/20240212_100712_CARD_challenge_virus_Report.tsv')
dat <- standardize_format(dat)
#### Source the function ###
source('src/functions.R')
dat <- standardize_format(dat)
setnames(dat, trim_colnames(dat))
#set column order
col_order=c(colnames(dat)[1:2],sort(colnames(dat)[3:ncol(dat)]))
setcolorder(dat,col_order)
setnames(design, c('sample_name', 'condition', 'control'))
Log2_dat=dat
Log2_dat=as.data.frame(Log2_dat)
Log2_dat[, 3:ncol(Log2_dat)]=log2(Log2_dat[, 3:ncol(Log2_dat)]+1)
Log2_DT = Log2_dat
design_matrix = design
#data
name=colnames(Log2_DT)[1:2]
rownames(Log2_DT)=Log2_DT$Protein_Group
#comparation
conditions <- unique(design_matrix$condition)
conditions
treatment='EBV_01_24hr'
control=unique(design_matrix$control[design_matrix$condition==treatment])
print(paste0(treatment, ' vs ', control, ' Differential Analysis by Limma '))
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- Log2_DT[,c(treatment_samples, control_samples)]
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
if (n_treatment>3&n_control>3) {
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[!(DT_limma$missing_value_t >(n_treatment/2)&DT_limma$missing_value_t < n_treatment),]
DT_limma <- DT_limma[!(DT_limma$missing_value_c >(n_control/2)&DT_limma$missing_value_c <n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
} else{
# Drop rows (protein groups) with missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
}
group_list <- factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
limma_design <- model.matrix(~0+group_list)
colnames(limma_design) <- levels(group_list)
rownames(limma_design) <- colnames(DT_limma)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = design)
#limma
fit <- lmFit(DT_limma, limma_design)
fit2 <- contrasts.fit(fit, cont.matrix)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = design)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = limma_design)
#limma
fit <- lmFit(DT_limma, limma_design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, trend=TRUE)
result_limma <- topTable(fit2, coef=1,n=Inf)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='Protein_Group',by.y=0)
View(result_limma)
usethis::use_testthat()  # Initializes the testing structure
setwd("~/ProtPipe")
dat <- fread("EXAMPLES/DIFF_ABUNDANCE")
library(data.table)
dat <- fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <- create_protdata(dat)
source('R/test_prot_data.R')
source('R/prot_data.R')
dat_pro <- create_protdata(dat)
library(dplyr)
dat_pro <- create_protdata(dat)
library(matrixStats)
dat_pro <- create_protdata(dat)
source('R/prot_data.R')
dat_pro <- create_protdata(dat)
View(dat_pro)
View(dat_pro@data)
devtools::load_all()
View(dat_pro)
devtools::load_all()
rm(list = c("create_protdata"))
devtools::load_all()
dat <- fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <- create_protdata(dat)
devtools::load_all()
dat_pro <- create_protdata(dat)
View(dat)
devtools::load_all()
dat_pro <- create_protdata(dat)
View(dat)
View(dat)
devtools::load_all()
dat_pro <- create_protdata(dat)
devtools::load_all()
dat_pro <- create_protdata(dat)
View(dat_pro)
View(dat_pro@data.long)
View(dat_pro)
devtools::load_all()
devtools::load_all()
devtools::load_all()
rlang::last_trace()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
dat_pro <- create_protdata(dat)
t <- get_pg_counts(dat_pro)
View(dat_pro)
View(dat_pro)
View(dat_pro@data.long)
View(dat_pro)
