# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
t <- c(gene_col, prot_col)
gene_col = "Genes"
PD = dat_pro
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(getCondition(PD)[,c(gene_col, prot_col)]) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
t <- c(gene_col, prot_col)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(, dplyr::select(getCondition(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getCondition(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col))) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
View(dat)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col)),by=0) %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
dat_original <- getData(PD)
dat <- getData(PD) %>%
# Calculte missing values
dplyr::mutate(missing_value = rowSums(is.na(.)))%>%
# Calculate median values
dplyr::mutate(median = matrixStats::rowMedians(as.matrix(dplyr::select(., -contains("missing_value")) %>%
dplyr::select_if(is.numeric)), na.rm = TRUE)) %>%
merge(dplyr::select(getProtMeta(PD),c(gene_col, prot_col)),by='row.names') %>%
#Identify unique Protein_Group with the least missing values and highest median intensity
dplyr::group_by(..gene_col) %>%
dplyr::filter(missing_value == min(missing_value)) %>%
dplyr::slice(which.max(median)) %>%
dplyr::ungroup() %>%
dplyr::select(-c(missing_value, median))
devtools::load_all()
# Print the current working directory
print(getwd())
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
devtools::load_all()
dat_pro <<- create_protdata(dat)
devtools::load_all()
dat_pro <<- create_protdata(dat)
View(dat_pro)
View(dat_pro@data)
expect_s4_class(dat_pro, "ProtData")
View(dat)
View(dat_pro)
View(dat_pro@condition)
View(dat_pro@data.long)
View(dat_pro@data.long)
PD<- dat_pro
# get the number of protein groups per sample
pgcounts <- data.table::as.data.table(table(getDataLong(PD)$Sample))
View(pgcounts)
View(dat_pro@condition)
#' Title
#'
#' @param PD A prot_data object
#' @param by_condition True if you want to group by condition
#'
#' @return
#' @export
#'
#' @examples
plot_pg_counts <- function(PD, condition = NULL) {
# get the number of protein groups per sample
pgcounts <- data.table::as.data.table(table(getDataLong(PD)$Sample))
colnames(pgcounts) <- c("Sample", "N")
pgcounts$Condition=as.factor(gsub('_[0-9]+$','',pgcounts$Sample))
# Order samples by ascending counts
n_samples <- nrow(pgcounts)
if (is.null(condition)){
if (n_samples > 20) {
p=ggplot2::ggplot(pgcounts, ggplot2::aes(x=Sample, y=N)) +
ggplot2::geom_bar(stat="identity", fill="#67a9cf")+
ggplot2::theme_classic()+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')+
ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(angle = 90))
}
if (n_samples <= 20) {
p=ggplot2::ggplot(pgcounts, ggplot2::aes(x=Sample, y=N,fill=Condition)) +
ggplot2::geom_bar(stat="identity")+
ggplot2::theme_classic()+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')+
ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(angle = 90))+
ggplot2::geom_text(ggplot2::aes(label=N, y=N + (0.05*max(pgcounts$N))))
}
}else{
# group by condition
condition_file <- getCondition(PD)
if (condition %in% colnames(condition_file)){
summary_data <- pgcounts %>%
dplyr::group_by(Condition) %>%
dplyr::summarize(mean = mean(N), sd = sd(N)) %>%
dplyr::arrange(Condition)
p=ggplot2::ggplot(summary_data, ggplot2::aes(x=as.factor(Condition), y=mean)) +
ggplot2::geom_bar(stat="identity",fill="#67a9cf", position= ggplot2::position_dodge())+
ggplot2::theme_classic()+
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=ggplot2::position_dodge(.9))+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')
}
return(p)
}else{
#' Title
#'
#' @param PD A prot_data object
#' @param by_condition True if you want to group by condition
#'
#' @return
#' @export
#'
#' @examples
plot_pg_counts <- function(PD, condition = NULL) {
# get the number of protein groups per sample
pgcounts <- data.table::as.data.table(table(getDataLong(PD)$Sample))
colnames(pgcounts) <- c("Sample", "N")
pgcounts$Condition=as.factor(gsub('_[0-9]+$','',pgcounts$Sample))
# Order samples by ascending counts
n_samples <- nrow(pgcounts)
if (is.null(condition)){
if (n_samples > 20) {
p=ggplot2::ggplot(pgcounts, ggplot2::aes(x=Sample, y=N)) +
ggplot2::geom_bar(stat="identity", fill="#67a9cf")+
ggplot2::theme_classic()+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')+
ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(angle = 90))
}
if (n_samples <= 20) {
p=ggplot2::ggplot(pgcounts, ggplot2::aes(x=Sample, y=N,fill=Condition)) +
ggplot2::geom_bar(stat="identity")+
ggplot2::theme_classic()+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')+
ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(angle = 90))+
ggplot2::geom_text(ggplot2::aes(label=N, y=N + (0.05*max(pgcounts$N))))
}
}else{
# group by condition
condition_file <- getCondition(PD)
if (condition %in% colnames(condition_file)){
summary_data <- pgcounts %>%
dplyr::group_by(Condition) %>%
dplyr::summarize(mean = mean(N), sd = sd(N)) %>%
dplyr::arrange(Condition)
p=ggplot2::ggplot(summary_data, ggplot2::aes(x=as.factor(Condition), y=mean)) +
ggplot2::geom_bar(stat="identity",fill="#67a9cf", position= ggplot2::position_dodge())+
ggplot2::theme_classic()+
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=ggplot2::position_dodge(.9))+
ggplot2::labs(fill = "",x="",y='Number of Protein Groups')
return(p)
}else{
stop("the selected condition does not appear in the condition file")
}
}
}
plot_pg_counts(PD, "condition")
DT.corrs <- get_spearman(PD)
View(DT.corrs)
if (is.null(condition)){
DT.corrs <- get_spearman(PD)
n_samples <- length(unique(DT.corrs[,'SampleA']))
max_limit <- max(DT.corrs$Spearman)
min_limit <- min(DT.corrs$Spearman)
mid_limit <- as.numeric(format(((max_limit + min_limit) / 2), digits=3))
g <- ggplot2::ggplot(DT.corrs, ggplot2::aes(x=SampleA, y=SampleB, fill=Spearman, label = label )) +
ggplot2::geom_tile() +
ggplot2::geom_text(color='gray10') +
ggplot2::theme_classic() +
ggplot2::scale_fill_gradient2(low = "skyblue", high = "tomato1", mid = "white",
midpoint = mid_limit, limit = c(min_limit,max_limit),
space = "Lab", breaks=c(min_limit, mid_limit, max_limit),
name="Spearman\nCorrelation\n") +
ggplot2::theme(axis.text.x=ggplot2::element_text(angle=45, hjust=1)) +
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.title.y=ggplot2::element_blank())
return (g)
}else{
}
devtools::load_all()
View(plot_pg_counts)
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
expect_s4_class(dat_pro, "ProtData")
devtools::load_all()
plot_pg_counts(dat_pro)
t <- plot_pg_counts(dat_pro)
devtools::load_all()
plot_pg_counts(dat_pro)
plot_pg_counts(dat_pro,"base_condition")
plot_correlation_heatmap(dat_pro)
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
View(condition_file)
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
View(DT.corrs)
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
View(DT.corrs)
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
plot_correlation_heatmap(dat_pro, "base_condition")
devtools::load_all()
removeOutliers(dat_pro)
devtools::load_all()
removeOutliers(dat_pro)
devtools::load_all()
removeOutliers(dat_pro)
View(pgcounts)
devtools::load_all()
removeOutliers(dat_pro)
devtools::load_all()
removeOutliers(dat_pro)
devtools::load_all()
removeOutliers(dat_pro)
t <- removeSample(dat_pro, ["day0_1"])
t <- removeSample(dat_pro, c("day0_1"))
View(dat_pro)
devtools::load_all()
t <- removeSample(dat_pro, c("day0_1"))
View(t)
View(t@condition)
View(dat_pro@data)
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@data)
View(dat_pro@data.long)
View(dat_pro@condition)
View(t@condition)
View(t@data.long)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t@data.long)
View(dat_pro@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t@condition)
View(dat_pro@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
View(t@data.long)
View(t@data)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
f <- removeOutliers(dat_pro)
devtools::load_all()
f <- removeOutliers(dat_pro)
View(f)
View(f@condition)
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <<- create_protdata(dat)
devtools::load_all()
f <- removeOutliers(dat_pro)
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
devtools::load_all()
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@data.long)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@condition)
devtools::load_all()
t <- removeSample(dat_pro, c("Day0_1"))
View(t)
View(t@data)
View(t@data.long)
View(t@condition)
devtools::load_all()
f <- removeOutliers(dat_pro)
devtools::load_all()
f <- removeOutliers(dat_pro)
devtools::load_all()
f <- removeOutliers(dat_pro)
dat <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
dat_pro <<- create_protdata(dat)
expect_s4_class(dat_pro, "ProtData")
View(dat_pro)
View(dat_pro@data)
View(dat_pro@data.long)
View(dat_pro@data)
View(dat_pro@condition)
devtools::load_all()
dat <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
dat_pro <<- create_protdata(dat)
View(dat)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@data.long)
View(dat_pro@condition)
View(dat_pro@prot_meta)
plot_correlation_heatmap(dat_pro)
removeOutliers(dat_pro)
new_dat_pro <- removeOutliers(dat_pro)
plot_correlation_heatmap(new_dat_pro)
plot_PCs(new_dat_pro)
plot_pg_counts(new_dat_pro)
View(new_dat_pro)
View(dat_pro)
View(new_dat_pro)
View(new_dat_pro@data.long)
devtools::load_all()
plot_pg_counts(new_dat_pro)
View(pgcounts)
View(pgcounts)
devtools::load_all()
plot_pg_counts(new_dat_pro)
devtools::load_all()
plot_pg_counts(new_dat_pro)
plot_pg_counts(new_dat_pro, condition = "base_condition")
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
library(rlang)
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
View(new_dat_pro@condition)
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
devtools::load_all()
plot_pg_counts(new_dat_pro, condition = "base_condition")
plot_pg_intensities(new_dat_pro)
plot_correlation_heatmap(new_dat_pro, condition = "base_condition")
plot_PCs(new_dat_pro)
devtools::load_all()
plot_PCs(new_dat_pro)
plot_PCs(new_dat_pro, condition = "base_condition")
plot_hierarchical_cluster(new_dat_pro)
filtered_PD <- removeSample(new_dat_pro, "SLAM_HRT_3")
plot_hierarchical_cluster(filtered_PD)
plot_PCs(filtered_PD)
devtools::load_all()
dat <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
dat_pro <<- create_protdata(dat)
View(dat_pro)
View(dat_pro@data)
dataa <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
dat_pro <<- create_protdata(dataa)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@data.long)
View(dat_pro@condition)
devtools::load_all()
df <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
df <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/metadata.csv")
df <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/report.PG_matrix.tsv")
meta <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Heart/metadata.csv")
dat_pro <<- create_protdata(df)
-
df1 <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Muscle/report.PG_matrix.tsv")
df1 <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Muscle/report.PG_matrix.tsv")
meta1 <- data.table::fread("~/OneDrive - National Institutes of Health/projects/SLAM/Muscle/metadata.csv")
dat_pro1 <<- create_protdata(df1)
View(dat_pro1)
View(df1)
View(dat_pro1@condition)
devtools::load_all()
dat_pro1 <<- create_protdata(df1)
options(warn = 1)
dat_pro1 <<- create_protdata(df1)
dat_pro1 <- create_protdata(df1)
View(dat_pro1)
View(dat_pro1@condition)
devtools::load_all()
mega_pd <- combine([df, df1])
mega_pd <- combine(c(df, df1))
mega_pd <- combine(c(datapro, datapro1))
mega_pd <- combine(c(data_pro, data_pro1))
mega_pd <- combine(c(dat_pro, dat_pro1))
devtools::load_all()
mega_pd <- combine(c(dat_pro, dat_pro1))
View(mega_pd)
plot_pg_counts(mega_pd)
# Run roxygen2 to update the NAMESPACE file
roxygen2::roxygenise()
dat_pro2 <- removeOutliers(dat_pro1)
devtools::load_all()
dat_pro2 <- removeOutliers(dat_pro1)
devtools::load_all()
dat_pro2 <- removeOutliers(dat_pro1)
devtools::load_all()
dat_pro2 <- removeOutliers(dat_pro1)
devtools::test()
