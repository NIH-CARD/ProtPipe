top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!sym(label_col) %in% top5_gene[[label_col]], !!sym(label_col), ''))
}
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% label_gene, !!sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!sym(label_col), ''))
}
label_col = NULL
if(is.null(label_col)){
label_col = names(DT.original[1])
}
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% label_gene, !!sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!sym(label_col), ''))
}
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% label_gene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% label_gene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
View(DT)
if(is.null(label_col)){
label_col = rownames(DT.original)
}
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% label_gene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
if(is.null(label_col)){
label_col = rownames(DT.original)
}
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% label_gene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
View(DT)
View(result_ttest)
View(DT)
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
t <- do_t_test(dat_pro, treatment_samples = treatment_samples, control_samples = control_samples)
devtools::load_all()
t <- do_t_test(dat_pro, treatment_samples = treatment_samples, control_samples = control_samples)
col <- names(object@prot_meta)
DT <- cbind(object@prot_meta, object@data)
meta <- object@condition
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
#ttest table
# Initial data transformation
DT_ttest <- DT[,c(col, treatment_samples, control_samples)]
# Convert NA to 0 and add missing value calculations
DT_ttest <- DT_ttest %>%
# Convert NA to 0
dplyr::mutate(across(where(is.numeric), ~ dplyr::coalesce(., 0))) %>%
# Calculate missing values
dplyr::mutate(
missing_value = rowSums(dplyr::select(., -col) == 0),  # Total missing values per row, excluding PTM column
missing_value_c = rowSums(dplyr::select(., all_of(control_samples)) == 0),  # Missing values in control samples per row
missing_value_t = rowSums(dplyr::select(., all_of(treatment_samples)) == 0)  # Missing values in treatment samples per row
) %>%
# Filter features with > 50% missing values
dplyr::filter(
!(missing_value_t > (n_treatment / 2) & missing_value_t < n_treatment),
!(missing_value_c > (n_control / 2) & missing_value_c < n_control),
missing_value != (n_treatment + n_control)
) %>%
# Select relevant columns
dplyr::select(-missing_value, -missing_value_c, -missing_value_t)%>%
as.data.frame()
View(DT_ttest)
# Perform t-test  on treatment and control columns
t_test <- apply(DT_ttest, 1, function(x){
a =factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
fvalue=var.test(x~a)
if (!is.na(fvalue$p.value)){
if (fvalue$p.value > 0.05){
result <- t.test(x~a, var.equal = T)
}else{
result <- t.test(x~a, var.equal = F)
}
}
treatment_estimate <- as.numeric(unlist(result$estimate[1]))
control_estimate <- as.numeric(unlist(result$estimate[2]))
return(data.table::data.table('P.Value'=result$p.value,
'treatment_estimate'=treatment_estimate,
'control_estimate'=control_estimate)
)
})
prot_meta <- DT_ttest[,col]
DT_ttest[,col] <- NULL
# Perform t-test  on treatment and control columns
t_test <- apply(DT_ttest, 1, function(x){
a =factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
fvalue=var.test(x~a)
if (!is.na(fvalue$p.value)){
if (fvalue$p.value > 0.05){
result <- t.test(x~a, var.equal = T)
}else{
result <- t.test(x~a, var.equal = F)
}
}
treatment_estimate <- as.numeric(unlist(result$estimate[1]))
control_estimate <- as.numeric(unlist(result$estimate[2]))
return(data.table::data.table('P.Value'=result$p.value,
'treatment_estimate'=treatment_estimate,
'control_estimate'=control_estimate)
)
})
t_test <- data.table::rbindlist(t_test)
result_ttest <- cbind(DT_ttest, t_test)
t_test <- data.table::rbindlist(t_test)
result_ttest <- cbind(prot_meta, DT_ttest, t_test)
# Merge DT and result_ttest based on PTM column
#result_ttest <- merge(DT[, name, drop=FALSE], result_ttest, by.x=col, by.y='row.names')
# Calculate logFC and adjust P-values using dplyr
result_ttest <- result_ttest %>%
dplyr::mutate(logFC = log2((treatment_estimate+1) / (control_estimate + 1)),
adj.P.Val = p.adjust(P.Value, method='BH'))
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
devtools::load_all()
plot_volcano(result_ttest)
do_t_test(dat_pro, treatment_samples, control_samples)
t<-do_t_test(dat_pro, treatment_samples, control_samples)
View(t)
#data
col <- names(object@prot_meta)
DT <- cbind(object@prot_meta, object@data)
meta <- object@condition
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
treatment <- treatment_samples
control <- control_samples
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
Log2_DT <- cbind(object@prot_meta, object@data)
meta <- object@condition
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
DT_limma <- Log2_DT[,c(treatment_samples, control_samples)]
View(DT_limma)
#data
col <- names(object@prot_meta)
DT <- cbind(object@prot_meta, object@data)
View(DT)
meta <- object@condition
DT_limma <- DT[,c(treatment_samples, control_samples)]
View(DT_limma)
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
DT_limma <- filter_features(DT_limma, alpha = 0.5)
filter_features <- function(df, alpha){
if (n_treatment>3&n_control>3) {
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[!(DT_limma$missing_value_t >(n_treatment * alpha)&DT_limma$missing_value_t < n_treatment),]
DT_limma <- DT_limma[!(DT_limma$missing_value_c >(n_control * alpha)&DT_limma$missing_value_c <n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
} else{
# Drop rows (protein groups) with missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
}
}
DT_limma <- filter_features(DT_limma, alpha = 0.5)
filter_features <- function(df, alpha){
if (n_treatment>3&n_control>3) {
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[!(DT_limma$missing_value_t >(n_treatment * alpha)&DT_limma$missing_value_t < n_treatment),]
DT_limma <- DT_limma[!(DT_limma$missing_value_c >(n_control * alpha)&DT_limma$missing_value_c <n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
} else{
# Drop rows (protein groups) with missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
}
return(DT_limma)
}
DT_limma <- filter_features(DT_limma, alpha = 0.5)
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
#data
col <- names(object@prot_meta)
DT <- cbind(object@prot_meta, object@data)
meta <- object@condition
treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- DT[,c(treatment_samples, control_samples)]
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
DT_limma <- filter_features(DT_limma, alpha = 0.5)
View(DT_limma)
group_list <- factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
group_list
limma_design <- model.matrix(~0+group_list)
colnames(limma_design) <- levels(group_list)
rownames(limma_design) <- colnames(DT_limma)
cont.matrix <- makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = limma_design)
cont.matrix <- limma::makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = limma_design)
#limma
fit <- limma::lmFit(DT_limma, limma_design)
fit2 <- limma::contrasts.fit(fit, cont.matrix)
fit2 <- limma::eBayes(fit2, trend=TRUE)
result_limma <- limma::topTable(fit2, coef=1,n=Inf)
result_limma=merge(Log2_DT[,c(name,treatment_samples, control_samples)],result_limma,by.x='Protein_Group',by.y=0)
View(result_limma)
View(DT)
View(Log2_DT)
View(DT_limma)
#data
meta_cols <- names(object@prot_meta)
result_limma=merge(DT[,c(meta_col,treatment_samples, control_samples)],result_limma,by.x='Protein_Group',by.y=0)
result_limma=merge(DT[,c(meta_cols,treatment_samples, control_samples)],result_limma,by.x='Protein_Group',by.y=0)
result_limma=merge(DT[,c(meta_cols,treatment_samples, control_samples)],result_limma,by.x=0,by.y=0)
View(result_limma)
result_limma$Row.names <- NULL
View(result_limma)
plot_volcano(result_limma)
devtools::load_all()
df <- data.table::fread("EXAMPLES/DIANN/report.pg_matrix.tsv")
meta <- data.table::fread("EXAMPLES/DIANN/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
Log2_DP <- ProtPipe::log2_transform(dat_pro)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
devtools::load_all()
df <- data.table::fread("EXAMPLES/DIANN/report.pg_matrix.tsv")
meta <- data.table::fread("EXAMPLES/DIANN/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
Log2_DP <- ProtPipe::log2_transform(dat_pro)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
devtools::load_all()
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
devtools::load_all()
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
devtools::load_all()
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
View(DE)
View(DE)
object <- Log2_DT
#data
meta_cols <- names(object@prot_meta)
object <- Log2_DP
#data
meta_cols <- names(object@prot_meta)
DT <- cbind(object@prot_meta, object@data)
meta <- object@condition
# treatment_samples=grep(treatment,colnames(Log2_DT),value = T)
# control_samples=grep(control,colnames(Log2_DT),value = T)
DT_limma <- DT[,c(treatment_samples, control_samples)]
n_treatment <- length(treatment_samples)
n_control <- length(control_samples)
# Convert NA to 0
DT_limma[is.na(DT_limma)] <- 0
View(DT_limma)
# Filter out sparse proteins
DT_limma <- filter_features(DT_limma, control_samples, treatment_samples, alpha = 0.5)
filter_features <- function(DT_limma, control_samples, treatment_samples, alpha){
if (n_treatment>3&n_control>3) {
# Drop rows (protein groups) with > 50% missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[!(DT_limma$missing_value_t >(n_treatment * alpha)&DT_limma$missing_value_t < n_treatment),]
DT_limma <- DT_limma[!(DT_limma$missing_value_c >(n_control * alpha)&DT_limma$missing_value_c <n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
} else{
# Drop rows (protein groups) with missingness in samples
DT_limma$missing_value= apply(DT_limma, 1, function(x) sum(x==0))
DT_limma$missing_value_c= apply(DT_limma[,control_samples], 1, function(x) sum(x==0))
DT_limma$missing_value_t= apply(DT_limma[,treatment_samples], 1, function(x) sum(x==0))
DT_limma <- DT_limma[DT_limma$missing_value_t %in% c(0,n_treatment),]
DT_limma <- DT_limma[DT_limma$missing_value_c %in% c(0,n_control),]
DT_limma <- DT_limma[DT_limma$missing_value != (n_treatment+n_control),]
DT_limma[,grep('missing_value',colnames(DT_limma))]=NULL
}
return(DT_limma)
}
# Filter out sparse proteins
DT_limma <- filter_features(DT_limma, control_samples, treatment_samples, alpha = 0.5)
View(DT_limma)
#design
group_list <- factor(c(rep('treatment',n_treatment),
rep("control",n_control)),
levels = c('treatment',"control"))
limma_design <- model.matrix(~0+group_list)
colnames(limma_design) <- levels(group_list)
rownames(limma_design) <- colnames(DT_limma)
cont.matrix <- limma::makeContrasts(contrasts = paste0(unique(group_list),collapse = "-"),levels = limma_design)
#limma
fit <- limma::lmFit(DT_limma, limma_design)
fit2 <- limma::contrasts.fit(fit, cont.matrix)
fit2 <- limma::eBayes(fit2, trend=TRUE)
result_limma <- limma::topTable(fit2, coef=1,n=Inf)
result_limma=merge(DT[,c(meta_cols,treatment_samples, control_samples)],result_limma,by.x=0,by.y=0)
result_limma$Row.names <- NULL
View(result_limma)
devtools::load_all()
df <- data.table::fread("EXAMPLES/DIANN/report.pg_matrix.tsv")
meta <- data.table::fread("EXAMPLES/DIANN/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
Log2_DP <- ProtPipe::log2_transform(dat_pro)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
View(DE)
ProtPipe::plot_volcano(DE)
devtools::load_all()
df <- data.table::fread("EXAMPLES/DIANN/report.pg_matrix.tsv")
meta <- data.table::fread("EXAMPLES/DIANN/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
Log2_DP <- ProtPipe::log2_transform(dat_pro)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
DE <- ProtPipe::do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
ProtPipe::plot_volcano(DE)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE)
View(Log2_DP)
devtools::document()
DE <- ProtPipe::do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
df <- data.table::fread("EXAMPLES/DIANN/report.pg_matrix.tsv")
meta <- data.table::fread("EXAMPLES/DIANN/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
Log2_DP <- ProtPipe::log2_transform(dat_pro)
treatment_samples <- c("SLAM_1", "SLAM_2", "SLAM_3", "SLAM_4", "SLAM_5")
control_samples <- c("SLAM_6", "SLAM_7", "SLAM_8", "SLAM_9", "SLAM_10")
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
View(DE)
plot_volcano(DE)
View(Log2_DT)
View(Log2_DP)
View(Log2_DP@data)
View(Log2_DP@prot_meta)
View(Log2_DP)
View(Log2_DP@condition)
shiny::runApp('~/protpipe_app')
runApp('~/OneDrive - National Institutes of Health/Code/protpipe_App')
git branch
devtools::document()
?do_limma
devtools::document()
?do_limma
dat <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
dat_pro <- create_protdata(dat, intensity_cols = c(3:44))
devtools::load_all()
devtools::document()
