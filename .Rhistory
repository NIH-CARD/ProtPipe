gse_go <- ProtPipe::gse_go(ordered_genes)
ordered_genes_unique <- ordered_genes[!duplicated(names(ordered_genes))]
gse_go <- ProtPipe::gse_go(ordered_genes_unique)
gse_kegg <- ProtPipe::gse_kegg(ordered_genes_unique)
View(gse_go)
View(gse_kegg)
devtools::load_all()
devtools::load_all()
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
DT <- ProtPipe::add_entrez(DE)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]
View(up_genes)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]$ENTREZID
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]$ENTREZID
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes]$ENTREZID, df_with_entrez$ENTREZID)
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes$ENTREZID, df_with_entrez$ENTREZID)
datas$go_up <- go_up
datas$kegg_up <- kegg_up
p <- enrichplot::dotplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_dotplot <- p
g <- enrichplot::barplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_barplot <- g
}
datas <- list()
plots <- list()
DT <- ProtPipe::add_entrez(DE)
## up and down regulated genes
up_genes=DT[which(DT$logFC>=lfc_threshold&DT$adj.P.Val<=fdr_threshold),]
down_genes=DT[which(DT$logFC<=(-lfc_threshold)&DT$adj.P.Val<=fdr_threshold),]
# over representation of upregulated genes
if (length(up_genes)>0){
go_up <- ProtPipe::enrich_go(up_genes$ENTREZID, df_with_entrez$ENTREZID)
kegg_up <- ProtPipe::enrich_kegg(up_genes$ENTREZID, df_with_entrez$ENTREZID)
datas$go_up <- go_up
datas$kegg_up <- kegg_up
p <- enrichplot::dotplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_dotplot <- p
g <- enrichplot::barplot(go_up, showCategory = 10, split = "ONTOLOGY") +
ggplot2::facet_grid(ONTOLOGY ~ ., scales = "free", space = "free")
plots$go_up_barplot <- g
}
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$go_up_dotplot)
print(en[[2]]$go_up_barplot)
devtools::load_all()
en <- enrich_pathways(DE)
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$go_up_dotplot_mf)
print(en[[2]]$go_up_dotplot_cc)
print(en[[2]]$go_up_dotplot_bp)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
devtools::load_all()
en <- enrich_pathways(DE)
View(en)
print(en[[2]]$gse_go_dotplot)
print(en[[2]]$gse_go_emapplot)
print(en[[2]]$gse_kegg_dotplot)
gene_col = "Genes"
DE[[gene_col]] <- sapply(strsplit(DE[[gene_col]], ";"), `[`, 1)
View(DE)
dplyr::left_join(
DE,
clusterProfiler::bitr(
DE$Genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db::org.Hs.eg.db
),
by = c("Genes" = "SYMBOL")
)
devtools::document()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(3:147), meta)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@condition)
View(df)
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
ProtPipe::plot_pg_counts(dat_pro)
ProtPipe::plot_pg_counts(dat_pro, condition = "viral.exposure")
ProtPipe::plot_pg_intensities(dat_pro)
ProtPipe::plot_correlation_heatmap(dat_pro)
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "viral.exposure")
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
devtools::load_all()
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
devtools::load_all()
ProtPipe::plot_correlation_heatmap(dat_pro, condition = "time")
ProtPipe::plot_PCs(dat_pro)
ProtPipe::plot_PCs(dat_pro, condition = "viral.exposure")
ProtPipe::plot_umap(dat_pro, condition = "time")
ProtPipe::plot_umap(dat_pro, condition = "viral.exposure")
ProtPipe::plot_umap(dat_pro, condition = "concentration")
ProtPipe::plot_hierarchical_cluster(dat_pro)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
ProtPipe::plot_CVs(PD, condition = "viral.exposure")
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, condition = "viral.exposure")
PD=dat_pro
condition="viral.exposure"
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)){
stop("the selected condition does not appear in the condition file")
}
intensities_t <- as.data.frame(t(PD@data))
intensities_t[[condition]] <- condition_file[[condition]]
# Split by condition
groups <- split(intensities_t, intensities_t[[condition]])
View(groups)
# Compute CVs per protein per group
cv_list <- lapply(names(groups), function(cond) {
group_data <- groups[[cond]][, !(colnames(groups[[cond]]) %in% condition), drop = FALSE]
if (nrow(group_data) < min_samples) {
return(NULL)  # Not enough samples
}
# CV per protein across samples in this group
cv_values <- apply(group_data, 2, function(x) {
if (all(is.na(x))) return(NA)
stats::sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)
})
data.frame(
Protein = names(cv_values),
CV = cv_values,
Condition = cond,
stringsAsFactors = FALSE
)
})
min_samples = 2
# Compute CVs per protein per group
cv_list <- lapply(names(groups), function(cond) {
group_data <- groups[[cond]][, !(colnames(groups[[cond]]) %in% condition), drop = FALSE]
if (nrow(group_data) < min_samples) {
return(NULL)  # Not enough samples
}
# CV per protein across samples in this group
cv_values <- apply(group_data, 2, function(x) {
if (all(is.na(x))) return(NA)
stats::sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)
})
data.frame(
Protein = names(cv_values),
CV = cv_values,
Condition = cond,
stringsAsFactors = FALSE
)
})
View(cv_list)
setwd("~/ProtPipe")
# Add base packages
base_deps <- c(
"r-base=4.2",
"r-devtools",
"r-remotes"
)
# Required packages
if (!requireNamespace("desc", quietly = TRUE)) {
install.packages("desc")
}
library(desc)
# Load DESCRIPTION
d <- desc::desc(file = "DESCRIPTION")
View(d)
# Extract relevant fields: Depends, Imports, (Suggests optional)
deps <- d$get_deps()
relevant_types <- c("Depends", "Imports")  # optionally add "Suggests"
deps <- deps[deps$type %in% relevant_types, ]
# Remove base R or version-only entries
deps <- deps[deps$package != "R", ]
# Format to conda-forge naming
r_pkgs <- unique(paste0("r-", tolower(deps$package)))
# Add base packages
base_deps <- c(
"r-base=4.2",
"r-devtools",
"r-remotes"
)
# Optional: suggest using these if common in R packages
extra_suggestions <- c("r-tidyverse", "r-data.table")
# Construct environment.yml content
yaml_lines <- c(
"name: myrpackage-env",
"channels:",
"  - conda-forge",
"  - defaults",
"dependencies:"
)
yaml_lines <- c(
yaml_lines,
paste0("  - ", base_deps),
paste0("  - ", sort(r_pkgs))  # sort for consistency
)
# Write to file
writeLines(yaml_lines, "environment.yml")
message("âœ… environment.yml created!")
# Optional: warn about packages that may not exist on conda-forge
check_availability <- function(pkg) {
url <- paste0("https://anaconda.org/conda-forge/", pkg)
res <- tryCatch({
con <- url(url, open = "r")
close(con)
TRUE
}, error = function(e) FALSE)
return(res)
}
missing <- r_pkgs[!vapply(r_pkgs, check_availability, logical(1))]
if (length(missing)) {
warning("These packages might not exist on conda-forge:\n  - ", paste(missing, collapse = "\n  - "))
warning("You may need to install them in R via install.packages() or remotes::install_github()")
}
source("~/.active-rstudio-document")
setwd("~/projects")
usethis::create_package("condaenvr")
usethis::create_package("RConda")
df <- data.table::fread("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Liver/report.pg_matrix.tsv")
meta <- data.table::fread("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Liver/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
dat_pro_norm <- log2_transform(dat_pro)
data_pro_scaled <- ProtPipe::scale(dat_pro_norm)
data_pro_impute <- impute(data_pro_scaled, 0)
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
data_pro_corrected <- batch_correct(data_pro_impute,"Preparation batch")
print(plot_PCs(data_pro_impute, condition = "Preparation batch"))
devtools::load_all()
df <- data.table::fread("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Liver/report.pg_matrix.tsv")
meta <- data.table::fread("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/projects/SLAM/Liver/metadata.csv")
dat_pro <- create_protdata(df, intensity_cols = c(5:138), meta)
dat_pro_norm <- log2_transform(dat_pro)
data_pro_scaled <- ProtPipe::scale(dat_pro_norm)
data_pro_impute <- impute(data_pro_scaled, 0)
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
devtools::load_all()
data_pro_impute <- impute(data_pro_scaled, 0)
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
devtools::load_all()
devtools::load_all()
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
devtools::load_all()
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
devtools::load_all()
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
ProtPipe::plot_PCs(data_pro_impute, Condition = "Preperation batch")
devtools::load_all()
ProtPipe::plot_PCs(data_pro_impute, Condition = "Preperation batch")
ProtPipe::plot_PCs(data_pro_impute, condition = "Preperation batch")
t <- ProtPipe::get_PCs(data_pro_impute, condition = "Preperation batch")
View(t)
View(t[["components"]])
View(dat_pro)
View(dat_pro@condition)
t <- ProtPipe::get_PCs(data_pro_impute, condition = "Preparation batch")
ProtPipe::get_PCs(data_pro_impute, condition = "Preparation batch")
ProtPipe::plot_PCs(data_pro_impute, condition = "Preparation batch")
data_pro_corrected <- batch_correct(data_pro_impute,"Preparation batch")
print(plot_PCs(data_pro_impute, condition = "Preparation batch"))
print(plot_PCs(data_pro_corrected, condition = "Preparation batch"))
View(data_pro_corrected)
View(data_pro_corrected@data)
View(data_pro_scaled)
View(data_pro_scaled@data)
View(data_pro_impute)
View(data_pro_impute@data)
shiny::runApp('shiny_app')
print(ProtPipe::plot_umap(data_pro_corrected, condition = "Preparation batch"))
devtools::load_all()
print(ProtPipe::plot_umap(data_pro_corrected, condition = "Preparation batch"))
devtools::load_all()
print(ProtPipe::plot_umap(data_pro_corrected, condition = "Preparation batch"))
print(ProtPipe::plot_PCs(data_pro_corrected, condition = "Preparation batch"))
devtools::load_all()
print(ProtPipe::plot_PCs(data_pro_corrected, condition = "Preparation batch"))
devtools::load_all()
print(ProtPipe::plot_PCs(data_pro_corrected, condition = "Preparation batch"))
print(ProtPipe::plot_PCs(data_pro, condition = "Preparation batch"))
print(ProtPipe::plot_PCs(dat_pro, condition = "Preparation batch"))
runApp('shiny_app')
PD <- dat_pro
condition = "Preparation batch"
DT <- getData(PD)
##cluster data(na=0)
cluster_data <- DT %>%
dplyr::select_if(is.numeric)%>%
# Replace NA values with 0
dplyr::mutate(dplyr::across(dplyr::everything(), ~ ifelse(is.na(.), 0, .)))  %>%
# Filter rows where the sum of numeric values is greater than 0
dplyr::filter(rowSums(.) > 0)
# Apply log2 transformation
log2_cluster_data <- cluster_data #%>%
set.seed(100)
DT.umap <- umap::umap(t(log2_cluster_data), n_neighbors=neighbors)
neighbors = 15
DT.umap <- umap::umap(t(log2_cluster_data), n_neighbors=neighbors)
DT.out <- data.table::as.data.table(DT.umap$layout, keep.rownames=TRUE)
View(DT.out)
View(PD)
View(PD@condition)
data.table::setnames(DT.out, c('Sample', 'UMAP1', 'UMAP2'))
if(is.na(condition)){
DT.out$Condition=gsub('_[0-9]+$','',DT.out$Sample)
}else {
DT.out$Condition=getCondition(PD)[[condition]]
}
runApp('shiny_app')
shiny::runApp('shiny_app')
object@data <- object@data %>%
dplyr::mutate(across(where(is.numeric), ~ ifelse(is.na(.) | is.nan(.), value, .)))
runApp('shiny_app')
runApp('shiny_app')
devtools::document()
setwd("~/ProtPipe")
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
gc()
setwd("~/ProtPipe/R")
devtools::document()
setwd("~/ProtPipe")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, meta)
dat <- df
# Check that data is a data frame
if (!is.data.frame(dat)) {
stop("The 'data' argument must be a data frame.")
}
#get the intensity cols
if (is.null(intensity_cols)){
intensity_cols <- detect_intensity_cols(dat)
}
intensity_cols = NULL
#get the intensity cols
if (is.null(intensity_cols)){
intensity_cols <- detect_intensity_cols(dat)
}
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
#Split up intensity and non-numeric protein metadata into seperate dataframes
prot_meta <- as.data.frame(dat[, -intensity_cols])
data <- as.data.frame(dat[, intensity_cols])
devtools::load_all()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, meta)
dat_pro <- create_protdata(df, condition = meta)
View(dat_pro)
View(dat_pro@data)
impute_min <- ProtPipe::impute_min(dat_pro)
View(impute_min)
View(impute_min@data)
impute_zero <- ProtPipe::impute(dat_pro, 0)
View(impute_zero)
View(impute_zero@data)
impute_minimal <- ProtPipe::impute_minimal(dat_pro)
devtools::load_all()
impute_minimal <- ProtPipe::impute_minimal(dat_pro)
devtools::load_all()
impute_minimal <- ProtPipe::impute_minimal(dat_pro)
View(impute_minimal)
View(impute_minimal@data)
devtools::load_all()
impute_minimal <- ProtPipe::impute_minimal(dat_pro)
impute_minimal <- ProtPipe::impute_minimal(dat_pro)
View(impute_minimal@data)
devtools::load_all()
shiny::runApp('shiny_app')
normalize_median <- ProtPipe::median_normalize(dat_pro)
View(normalize_median)
View(normalize_median@data)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
View(normalize_mean)
View(normalize_mean@data)
runApp('shiny_app')
df <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
setwd("~/ProtPipe")
df <- data.table::fread("EXAMPLES/DIFF_ABUNDANCE/iPSC.csv")
df <- data.table::fread("EXAMPLES/basic_example_data/iPSC.csv")
dat_pro <- create_protdata(df)
normalize_median <- ProtPipe::median_normalize(dat_pro)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
View(normalize_median)
View(normalize_median)
View(normalize_median@data)
View(normalize_mean)
View(normalize_mean@data)
View(impute_minimal)
View(impute_minimal@data)
runApp('shiny_app')
df <- data.table::fread("EXAMPLES/basic_example_data/iPSC.csv")
dat_pro <- create_protdata(df)
normalize_median <- ProtPipe::median_normalize(dat_pro)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
ProtPipe::plot_CVs(normalize_mean)
ProtPipe::plot_CVs(normalize_mean, condition = "basic_condition")
View(normalize_median@condition)
ProtPipe::plot_CVs(normalize_mean, condition = "base_condition")
ProtPipe::plot_pg_counts(normalize_median)
View(dat_pro)
View(dat_pro@data)
devtools::load_all()
devtools::document()
devtools::load_all()
runApp('shiny_app')
runApp('shiny_app')
View(PD0)
View(PD0@data)
dat_pro <- create_protdata(df)
normalize_median <- ProtPipe::median_normalize(dat_pro)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
runApp('shiny_app')
runApp('shiny_app')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
runApp('shiny_app')
shiny::runApp('ProtPipe_shiny')
setwd("~/ProtPipe/ProtPipe_shiny")
shiny::runApp()
runApp()
install.packages("curl")
install.packages("openssl")
shiny::runApp()
install.packages("rsconnect")
library(rsconnect)
rsconnect::removeAccount(niacard")
rsconnect::setAccountInfo(name='niacard', token='81905F9C65CC07F347BD3D176FCC6A40', secret='e1kR/XZ//NpZJ4KtPgl7AOp3vBB8jXsxYWGLMLpf')
rsconnect::removeAccount(niacard")
rsconnect::removeAccount("niacard")
rsconnect::setAccountInfo(name='niacard', token='81905F9C65CC07F347BD3D176FCC6A40', secret='e1kR/XZ//NpZJ4KtPgl7AOp3vBB8jXsxYWGLMLpf')
rsconnect::setAccountInfo(name='niacard', token='362E41F940774A081401ABD91B9688E9', secret='rYoxnLxdB/oDYd/UBTpQ4gd8YZQfqswHDiIhswk8')
install.packages("Rcpp")
shiny::runApp('ProtPipe_shiny')
library(rsconnect)
rsconnect::setAccountInfo(name='niacard', token='81905F9C65CC07F347BD3D176FCC6A40', secret='e1kR/XZ//NpZJ4KtPgl7AOp3vBB8jXsxYWGLMLpf')
remove.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
install.packages('rsconnect')
R.version.string
install.packages("openssl", type = "source")
install.packages("curl", type = "source")
install.packages("httr", type = "source")
install.packages("rsconnect", type = "source")
shiny::runApp('ProtPipe_shiny')
rsconnect::setAccountInfo(name='niacard', token='81905F9C65CC07F347BD3D176FCC6A40', secret='e1kR/XZ//NpZJ4KtPgl7AOp3vBB8jXsxYWGLMLpf')
rsconnect::setAccountInfo(name='niacard', token='E53AC22AA49199833DFFE4BAF7D2198A', secret='InAVhippxOeMdeMBX75q4K/2Aa7DWNVraLv8yhp7')
setwd("~/ProtPipe/ProtPipe_shiny")
