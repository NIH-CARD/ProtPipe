aes(label = labeltext),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))+
geom_point(data = PPI_score,color= Genes)
g <- ggplot(up_genes, aes(x=log2FC, y=rank)) +
geom_point() +
theme_classic()  +
geom_label_repel(
data = subset(DT),
aes(label = labeltext),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))+
geom_point(data = PPI_score,color="red")
g
g <- ggplot(up_genes, aes(x=log2FC, y=rank)) +
geom_point() +
theme_classic()  +
geom_point(data = PPI_score,color="red")
g
up_genes_plot=merge(up_genes,PPI_score,by="Genes",all=T)
View(up_genes_plot)
up_genes_plot$group=2
is.na(up_genes_plot$ppi_score)
up_genes_plot$group[is.na(up_genes_plot$ppi_score)]=1
View(up_genes_plot)
g <- ggplot(up_genes, aes(x=log2FC, y=rank,color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
g
g <- ggplot(up_genes_plot, aes(x=log2FC, y=rank,color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
g
g <- ggplot(up_genes_plot, aes(x=log2FC.x, y=rank,color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
g
ggplot(up_genes_plot, aes(x=log2FC.x, y=rank,color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
up_genes_plot$group='2'
up_genes_plot$group[is.na(up_genes_plot$ppi_score)]=1
g <- ggplot(up_genes_plot, aes(x=log2FC.x, y=rank,color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
g
g <- ggplot(up_genes_plot, aes(x=log2FC.x, y=rank,color=factor(group))) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme_classic()
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank,color="grey")) +
geom_point(aes(x=log2FC.y, y=rank,color="red"))+
theme_classic()
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank)) +
geom_point(aes(x=log2FC.y, y=rank))+
theme_classic()
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank)) +
geom_point(aes(x=log2FC.y, y=rank))+
scale_color_manual(values=c('#999999','#E69F00'))+
theme_classic()
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="grey") +
geom_point(aes(x=log2FC.y, y=rank),color='red')+
theme_classic()
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()
G
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = PPI_score,
aes(label = "Genes"),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(PPI_score),
aes(label = "Genes"),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
p
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(up_genes_plot[is.na(up_genes_plot$ppi_score),]),
aes(label = "Genes"),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
View(up_genes_plot)
up_genes_plot$labeltext=''
up_genes_plot$labeltext[!is.na(up_genes_plot$ppi_score)]=up_genes_plot$Genes[!is.na(up_genes_plot$ppi_score)]
View(up_genes_plot)
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(up_genes_plot[is.na(up_genes_plot$ppi_score),]),
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(up_genes_plot),
aes(label = labeltext),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(up_genes_plot[!is.na(up_genes_plot$ppi_score),]),
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
rlang::last_error()
rlang::last_trace()
top5_gene <- up_genes_plot[!is.na(up_genes_plot$ppi_score),]
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(top5_gene),
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = subset(top5_gene),
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
View(top5_gene)
colnames(top5_gene)
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
aes(label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
rlang::last_error()
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 2,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = up_genes_plot,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
g <- ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = up_genes_plot,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
max.overlaps=50,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
g
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 3,
max.overlaps=5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 3,
max.overlaps=10,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
max.overlaps=10,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggsave(g, "ppi.pdf", height=8, width=12)
g=ggplot(up_genes_plot) +
geom_point(aes(x=log2FC.x, y=rank),color="#999999") +
geom_point(aes(x=log2FC.y, y=rank),color='#E69F00')+
theme_classic()+
labs(x="Log2FC",y='Rank')+
geom_label_repel(
data = top5_gene,
aes(x=log2FC.y, y=rank,label = Genes),
size = 5,
max.overlaps=10,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
ggsave(g, "ppi.pdf", height=8, width=12)
g
ggsave(g, filename="ppi.pdf", height=8, width=12)
View(pro_interactions_from)
STRINGdb$help("get_graph")
neighbors=string_db$get_neighbors(protein_map)
summary=string_db$get_summary(protein_map)
summary=string_db$get_summary(protein_map,400)
string_db$get_summary(protein_map,200)
string_db$add_proteins_description(data.frame(neighbors)
)
string_db$add_proteins_description(data.frame('string_id'=neighbors))
string_db$add_proteins_description(neighbors)
a=string_db$mp(neighbors)
View(PPI_score)
a=string_db$map(neighbors)
t_test[, 'Group' := 'Others']
t_test[log2FC >= lfc_threshold, 'Group' := 'UP']
t_test[log2FC <= -lfc_threshold, 'Group' := 'DOWN']
t_test[p.adj >= fdr_threshold, 'Group' := 'Others']
up_genes=t_test[which(t_test$log2FC>=lfc_threshold&t_test$p.adj<=fdr_threshold),]
protein_map=string_db$mp(protein)
up_genes <- up_genes %>% string_db$map("Genes",removeUnmappedRows = TRUE)
View(up_genes)
ven_pro=list(
DE=unique(up_genes$STRING_id),
String_db=unique(neighbors))
ven=list(
DE=unique(up_genes$STRING_id),
String_db=unique(neighbors))
vd=euler(ven)
library(eulerr)
vd=euler(ven)
plot(vd,
factor_names = TRUE, labels=list(font=2, cex=1.2),
counts = TRUE,
key=TRUE,
fills = list(fill = c("#fbb4ae", "#b3cde3", "#ccebc5")),
cex=1,
edges = FALSE,
quantities = list(type = c("counts", "percent")))
plot(vd,
factor_names = TRUE, labels=list(font=2, cex=1.2),
counts = TRUE,
key=TRUE,
fills = list(fill = c("#fbb4ae", "#b3cde3", "#ccebc5")),
cex=1,
edges = FALSE,
quantities = list(type = c("counts")))
setwd('peptidome/')
dat <- fread('combined_modified_peptide.tsv')
View(dat)
colnames(dat)
}
standardize_format <- function(DT.original) {
# Accepts an input protein group intensity data.table, whether spectronaut or DIA-NN format,
# and restructures into one consistent style for downstream processing
DT <- copy(DT.original)
if("Protein.Ids" %in% colnames(DT)) {
print("DIAnn input")
DT[, 'Protein.Ids' := NULL]
DT[, 'Protein.Names' := NULL]
DT[, 'First.Protein.Description' := NULL]
setnames(DT, 'Protein.Group', 'Protein_Group')
} else if('PG.ProteinGroups' %in% colnames(DT)) {
print("Spectronaut input")
setnames(DT, 'PG.ProteinGroups', 'Protein_Group')
setnames(DT, 'PG.Genes', 'Genes')
DT=as.data.frame(DT)
# Use only Protein_Group and Genes
col_select=c('Protein_Group','Genes',grep('PG.Quantity',colnames(DT),value = T))
DT=DT[, col_select]
#as number
DT[,grep('PG.Quantity',colnames(DT))]=as.data.frame(apply(DT[,grep('PG.Quantity',colnames(DT))],2,as.numeric))
DT=data.table(DT)
}
else if('Peptide Sequence' %in% colnames(DT)) {
print("FragPipe input")
}
# Remove leading directories for sample names
# e.g. /path/to/sample1.mzML -> sample1.mzML
setnames(DT, basename(colnames(DT)))
# Remove trailing file extensions
extensions <- '.mzML$|.mzml$|.RAW$|.raw$|.dia$|.DIA$'
extension_samplenames <-  colnames(DT)[colnames(DT) %like% extensions]
trimmed_samplenames <- gsub(extensions, '', extension_samplenames)
setnames(DT, extension_samplenames, trimmed_samplenames)
return(DT[])
}
dat <- standardize_format(dat)
View(dat)
DT=dat
colnames(DT)=gsub("\\s", "_",colnames(DT))
View(DT)
class(DT$H_1975_1_Spectral_Count)
View(DT)
colnames(DT)
# Use only Protein_Group and Genes
col_select=c('Peptide_Sequence','Gene',grep('Intensity',colnames(DT),value = T))
# Use only Protein_Group and Genes
col_select=c('Peptide_Sequence','Gene',grep('[0-9]_Intensity',colnames(DT),value = T))
DT=DT[, col_select]
# Use only Protein_Group and Genes
DT=as.data.frame(DT)
col_select=c('Peptide_Sequence','Gene',grep('[0-9]_Intensity',colnames(DT),value = T))
DT=DT[, col_select]
DT=data.table(DT)
View(DT)
standardize_format <- function(DT.original) {
# Accepts an input protein group intensity data.table, whether spectronaut or DIA-NN format,
# and restructures into one consistent style for downstream processing
DT <- copy(DT.original)
if("Protein.Ids" %in% colnames(DT)) {
print("DIAnn input")
DT[, 'Protein.Ids' := NULL]
DT[, 'Protein.Names' := NULL]
DT[, 'First.Protein.Description' := NULL]
setnames(DT, 'Protein.Group', 'Protein_Group')
} else if('PG.ProteinGroups' %in% colnames(DT)) {
print("Spectronaut input")
setnames(DT, 'PG.ProteinGroups', 'Protein_Group')
setnames(DT, 'PG.Genes', 'Genes')
DT=as.data.frame(DT)
# Use only Protein_Group and Genes
col_select=c('Protein_Group','Genes',grep('PG.Quantity',colnames(DT),value = T))
DT=DT[, col_select]
#as number
DT[,grep('PG.Quantity',colnames(DT))]=as.data.frame(apply(DT[,grep('PG.Quantity',colnames(DT))],2,as.numeric))
DT=data.table(DT)
}
else if('Peptide Sequence' %in% colnames(DT)) {
print("FragPipe input")
colnames(DT)=gsub("\\s", "_",colnames(DT))
# Use only Protein_Group and Genes
DT=as.data.frame(DT)
col_select=c('Peptide_Sequence','Gene',grep('[0-9]_Intensity',colnames(DT),value = T))
DT=DT[, col_select]
DT=data.table(DT)
}
# Remove leading directories for sample names
# e.g. /path/to/sample1.mzML -> sample1.mzML
setnames(DT, basename(colnames(DT)))
# Remove trailing file extensions
extensions <- '.mzML$|.mzml$|.RAW$|.raw$|.dia$|.DIA$|_Intensity'
extension_samplenames <-  colnames(DT)[colnames(DT) %like% extensions]
trimmed_samplenames <- gsub(extensions, '', extension_samplenames)
setnames(DT, extension_samplenames, trimmed_samplenames)
return(DT[])
}
dat <- standardize_format(dat)
View(dat)
setnames(dat, trim_colnames(dat))
#set column order
col_order=c(colnames(dat)[1:2],sort(colnames(dat)[3:ncol(dat)]))
setcolorder(dat,col_order)
View(dat)
dat.long <- melt_intensity_table(dat)
#Converting to long format
tryTo(paste0('INFO: Converting to long format'), {
dat.long <- melt_intensity_table(dat)
}, 'ERROR: failed! Check for missing/corrupt headers?')
tryTo('INFO: Excluding all unquantified or zero intensities', {
dat.long <- dat.long[! is.na(Intensity)][Intensity != 0]
}, 'ERROR: failed!')
tryTo(paste0('INFO: Applying Filter Intensity > ',opt$minintensity),{
dat.long <- dat.long[Intensity > opt$minintensity]
}, 'ERROR: failed!')
tryTo('INFO: Plotting intensity distribution',{
tryTo(paste0('INFO: Applying Log[base', opt$log_base, '](value+1) transformation to intensities'),{
dat.long.log <- dat.long[, Intensity := log((Intensity + 1), base=opt$log_base)]
},'ERROR: failed! Was your log base numeric and > 1?')
plot_pg_intensities(dat.long.log, QC_dir, 'intensities.pdf', plot_title='Un-normalized intensities')
# plot_density(dat.long, QC_dir, 'intensity_density.pdf')
# plot_density(dat.long.normalized, QC_dir, 'intensity_density_normalized.pdf')
}, 'ERROR: failed!')
